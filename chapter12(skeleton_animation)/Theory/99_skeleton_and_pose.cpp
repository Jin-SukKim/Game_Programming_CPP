/*
    뼈대(Skeleton)와 포즈(pose)

    뼈대는 일반적으로 표현하는 방법은 본의 계층 구조(트리)다.
    root bone은 계층 구조의 베이스이며 부모 본이 없다.
    뼈대의 모든 본은 1개의 부모 본을 가진다.

    휴머노이드 캐릭터에 대한 간단한 뼈대 계층 구조

    루트 본은 원점의 위치와 일치하게 만든다.
    척추 본은 루트 본의 자식이며 차례로 왼쪽 및 오른쪽 엉덩이 본은 척추 본의 자식이다.
    
    이 본 계층 구조는 해부학을 모방한다.
    ex) 사람이 어깨를 회전하면 팔은 그 회전을 따른다.
    게임 뼈대를 사용해 이를 표현하면 어꺠 본이 팔꿈치 본의 부모이며,
    팔꿈치 본은 손목 본의 부모이고 손목 본은 손가락 본의 부모이다.

    뼈대가 주어졌을 떄 포즈는 뼈대의 설정을 표현한다.
    포즈는 임의의 애니메이션 프레임에서 뼈대의 설정(본 각각의 위치와 회전 값)을 의미한다. 
    
    ex) 캐릭터가 애니메이션으로 손을 흔들어 인사한다면
        캐릭터의 손 본을 올려서 흔드는 애니메이션 안에 하나 이상의 포즈가 있따.
    
    애니메이션은 시간 경과에 따라 뼈대가 전환되는 일련의 포즈 모음이다.

    바인딩 포즈(binding pose)는 애니메이션을 적용하기 전 뼈대의 기본 포즈다.
    t-포즈라고도 불리는데 일반적으로 캐릭터의 몸체가 바인딩 포즈에서 T 모양을 구성하기 때문이다.
    일반적으로 T처럼 보이게 하는 이유는 bone과 vertex를 연관시키기가 쉬워서이다.

    뼈대에서 본의 부모/자식 관계를 지정한는 것 외에도 각 본의 위치와 방향도 지정해야 한다.
    3D 모델에서 각 vertex는 모델의 오브젝트 공간 중심에 상대적인 위치였다.
    휴머노이드 캐릭터의 경우 오브젝트 공간 원점의 일반적인 위치는 바인드 포즈상에서 캐릭터의 발 사이에 있따.
    원점이 뼈대의 루트 본 위치와 일치하게 만든다.

    뼈대의 각 본의 위치와 방향

    1. 전역 포즈(global pose) : 오브젝트 공간 원점에 상대적이다.
    2. 로컬 포즈(local pose) : 부모 본에 상대적이다.
    
    루트 본은 부모가 없으므로 로컬 포즈와 전역 포즈는 동일하다.
    즉 루트 본의 위치와 방향은 항상 오브젝트 공간 원점을 기준으로 한다.

    모든 본에 로컬 포즈 데이터를 저장하면 변환 행렬을 사용해 위치와 방향을 나타낼수있다.
    본의 좌표계에 있는 한 점은 이 로컬 포즈변환 행렬을 사용해 부모 본의 좌표계로 변환하는 것이 가능하다.

    각 본이 로컬 포즈 행렬을 가지며 부모/자식 관계의 계층 구조가 주어지면 본에 대한 전역 포즈 행렬 계산이 가능해진다.
    ex) 척추 본의 부모는 루트 본이다.
        그래서 척추 본의 로컬 포즈 행렬은 루트 본을 기준으로 한 위치와 방향이다.
        루트 본의 로컬 포즈 행렬은 전역 포즈 행렬에 해당해 척추 본의 로컬 포즈 행렬을
        루트 본의 전역 포즈 행렬로 곱하면 척 추 본을 오브젝트 공간으로 변환하는 전역 포즈 행렬을 구할 수 있다.

        [SpineGlobal] = [SpineLocal][RootGlobal]

        척추 본의 좌표계에 한 점이 주어졌을 때 척추 본의 전역 포즈 행렬을 사용하면
        해당 점은 오브젝트 공간 좌표로 변환된다.

        부모가 척추인 왼쪽 엉덩이의 전역 포즈 행렬의 계산

        [HipLGlobal] = [HipLLocal][SpineLocal][RootGlobal]
        [HipLGlobal] = [HipLLocal][SpineGlobal]

    로컬 포즈는 항상 전역 포즈로 변환 가능하므로 로컬 포즈만 저장하는 것이 합리적으로 보이겠지만
    전역 형태로 일부 정보를 저장하면 프레임마다 요구되는 계산량을 줄일 수 있따.

    행렬로 본 포즈를 저장하는 것은 액터의 경우 잘 동작하지만,
    본의 위치와 방향을 각각 벡터와 쿼터니언으로 분리한다.
    쿼터니언이 애니메이션 중에 본의 회전을 좀 더 정확히 보간해주기에 분리해준다.

    본 스케일링은 일반적으로 특이한 형태로 크기를 늘리거나 줄이는 카툰 형태의 캐릭터에 사용된다.

    위치와 방향을 가진 본 변환 구조체

    struct BoneTransform
    {
        Quaternion mRotation;
        Vector3d mTranslation;
        // 행렬로 변환
        Matrix4x4 ToMatrix() const;
    };

    ToMatrix는 멤버 데이터를 사용해 회전 행렬과 이동 행렬을 만들고 곱한다.
    직접 쿼터니언과 벡터 변수를 사용하기에 많은 계산이 필요하지만 최종적으로
    그래픽 코드와 셰이더가 행렬을 사용해서 필수적이다.

    
*/
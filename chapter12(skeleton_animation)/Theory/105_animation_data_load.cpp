/*
    애니메이션 데이터 로딩

    이 프로젝트에서 사용하는 앰니메이션 파일 포맷은 JSON이다.

    애니메이션 파일은 관련 뼈대의 본의 개수뿐만 아니라 프레임의 수와
    애니메이션의 재생시간(초 단위에서) 같은 몇 가지 기본 정보를 포함한다.
    
    파일의 나머지 부분은 애니메이션 시 모델의 본에 대한 로컬 포즈 정보다.
    파일은 프레임마다 각 본에 대한 포즈 정보를 포함한 트랙이라는 데이터로 구성돼 있다.
    
    ex) 뼈대가 10개의 본을 가지며 50프레임이라면 애니메이션에는
        10개의 트랙이 있으며 각 트랙에는 본에 대한 50개의 포즈를 가진다.

    gpanim 데이터 포맷 기본 레이아웃

    {
    "version":1,
        "sequence":{
            "frames":25,
            "length":0.857544,
            "bonecount":68,
            "tracks":[
                {
                    "bone":0,
                    "transforms":[
                        {
                            "rot":[0.000000,0.000000,-0.706825,0.707388],
                            "trans":[0.000000,0.000000,0.000000]
                        },
                        {
                            "rot":[0.000000,0.000000,-0.706825,0.707388],
                            "trans":[0.000000,0.000000,0.000000]
                        },
                        // 프레임별 추가 변환
                        // ...
                    ],
                    // 각 본의 추가 트랙
                    // ...
                }
            ]
        }
    }

    이 포맷은 모든 본이 트랙을 가지는 것을 보장하지않는다.
    그래서 각 트랙은 본 인덱스로 시작한다.
    ex) 손가락 같은 본은 해당본에 애니메이션이 적용될 필요가 없다.
        이 경우 본은 트랙을 안가져도 된다.

    본이 트랙을 가진다면 트랙은 애니메이션의 프레임마다 로컬 포즈를 가져야 한다.

    또한 각 트랙의 애니메이션 데이터는 마지막에 처음 프레임을 복제한 여분의 프레임을 포함한다.
    그래서 만약 애니메이션의 재생 시간이 0.6초이며 19프레임으로 기술해도
    프레임 19는 프레임 0의 복사본이다.
    그래서 실제로는 18프레임이며 이 경우 프레임 레이트는 정확이 30FPS가 된다.
    이 복제 프레임은 애니메이션 루프를 좀 더 쉽게 구현 가능하게 한다.

    뼈대와 같이 로딩된 애니메이션 데이터를 저장하기 위해 새로운 클래스인 Animation을 생성한다.

    멤버 데이터는 본의 수, 애니메이션 프레임 수, 애니메이션 재생 시간,
    그리고 각 본에 대한 포즈 정보를 담은 트랙을 포함한다.
    뼈대와 같이 JSON 파일로부터 데이터를 로드한다.

    GetGlobalPoseAtTime 함수는 뼈대의 각 본에 대한 전역 포즈 행렬을 inTime으로 지정된 시간상에서 계산한다.
    그 후 outPoses 행렬 벡터에 이 전역 포즈 행렬을 기록한다.
    현재 이 함수는 inTime 파라미터는 무시하고 프레임 0에서 행렬을 얻는 것으로 하드코딩돼있다.
    프레임을 0으로 지정했으므로 게임은 화면에 그릴 수 있는 애니메이션의 첫번째 프레임을 얻게된다.
    나중에 시간에 맞게 구현한다.

    각 본에 대한 전역 포즈를 계산하려면 앞에서 설명했던 동일한 접근법을 따라야 한다.
    
    1. 루트 본의 전역 포즐르 구한다.
    2. 각 본의 전역 포즈는 로컬 포즈를 부모 본의 전역 포즈로 곱한 값이다.
    3. mTracks의 첫 번째 인덱스는 본 인덱스이며, 두번째 인덱스는
        애니메이션의 프레임에 해당한다.
    4. version 1의 GetGlobalPoseAtTime 함수는 두 번째 인덱스를 0으로 하드 코딩 한다.

    모든 본이 트랙을 가지지는 않으므로 GetGlobalPoseAtTIme 함수는 먼저 본이 트랙을 가지는지 확인한다.
    본이 트랙을 가지고 있지 않다면 본의 로컬 포즈 행렬은 항등 행렬이어야 한다.

    데이터를 저장할 맵을 생성하고 맵에 데이터를 캐싱하는 get 함수를 만든다.
    이 맵은 Animation 포인터를 포함한다.
    이맵을 Game에 추가한다.

    SkeletalMeshComponent 클래스를 제작해 기능을 추가해준다.
    각 본에 대한 행렬 팔레트(Palette)는 인버스 바이늗 포즈 행렬에 현재 포즈 행렬로 곱한 행렬을 저장했다.
    스키닝이 있는 vertex의 위치를 계산할 때는 이 팔레트를 사용해야 한다.
    SkeletalMeshComponent 클래스는 현재 애니메이션의 재생을 추적하고 뼈대에 접근할 수 있어
    이 클래스에 팔레트를 저장하는 것이 좋다.

    const size_t MAX_SKELETON_BONES = 96;
    struct MatrixPalette
    {
        Matrix4x4 mEntry[MAX_SKELETON_BONES];
    }

    최대 본의 수로 96을 설정했지만 본 인덱스 범위는 0~255까지 가능해 최대 256으로 올릴 수 있다

    클래스의 멤버 변수로 현재 애니메이션, 애니메이션 재생 속도, 애니메이션의 현재 시간,
    현재 행렬 팔레트를 만들어준다.

    그리고 행렬 팔레트를 계산하기 위해 함수또한 만들어준다.
    현재 전역 포즈 행렬과 전역 인버스 바인드 포즈 행렬을 곱해주면 된다.

    마지막으로 애니메이션 재생 속도와 Animation 포인터를 인자로 받는 PlayAnimation 함수를 생성한다.
    이 함수는 멤버 변수를 새롭게 설정한 뒤 행렬 팔레트 계산 함수를 호출한다.
    그리고 애니메이션 재생 시간을 반환한다.

    그러면 애니메이션 데이러 로드하고 애니메이션 프레임 0에 대한 포즈 행렬을 계산할 수 있고,
    행렬 팔레트도 계산이 가능하다.
    그러나 화면엔 나타나지 않는데 vertex shader를 수정해줘야 한다.

        

*/
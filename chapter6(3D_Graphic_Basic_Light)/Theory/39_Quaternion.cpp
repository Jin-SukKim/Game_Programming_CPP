/*
    Quaternion

    수많은 게임이 오일러 각 대신 쿼터니언을 사용한다.
    쿼터니언는 3D 그래픽에서 회전을 표현할 때 행렬 대신 사용하는
    수학적 개념으로 4개의 값(4차원)으로 이루어진 복소수이다.

    이번 공부에서는 간단하게 쿼터니언을 임의의 축(x,y,z가 아닌)에 대한
    회전ㅇ르 나타내는 방법이라고 간주한다.

    기본 정의

    3D 그래픽스는 단위 쿼터니언(unit quaternion)을 사용한다.
    단위 쿼터니언은 크기가 1인 쿼터니언이다.
    q = ((0, 0, 0), 1), q = (vector, scalar)

    쿼터니언은 벡터와 스칼라 두 요소 모두를 가진다.

    q = [qv, qs]

    벡터 및 스칼라 요소의 계산은 정규화된 회전 축 a와 회전 각도에 의존한다.

    qv = a * sin(각도 / 2)
    qs = cos(각도 / 2)

    이 방정식은 정규화된 회전축에서만 잘 동작한다.
    정규화되지 않은 축에 공식을 적용하면 단위 쿼터니언이 아닌 값을 산출하며
    이는 게임상에서 오브젝트가 찢겨지는 듯한(균인하지 않게 뻗어나가는 현상) 현상을 유발한다.

    오브젝트가 회전을 하려고 오일러 각을 사용하면 요, 피치, 롤 각도를 정확히 계산하는게 어렵다.
    쿼터니언은 이 문제를 쉽게 해결한다.

    오브젝트 회전시키기

    오브젝트가 x축을 향하고 위치 S에 있을 때 임의의 점 P를 향하도록 회전시킨다면
    
    1. 먼저 새로운 지점으로의 벡터를 계산한 뒤 이 벡터를 정규화한다.

    NewFacing = (P-S) / (||P-S||), 향하고자 하는 방향

    2. 그리고 초기에 향한 방향과 대상 물체를 향항 방향의 외적을 통해
    회전축을 계산한다.
    그리고 이 회전축 벡터를 정규화 한다.

    // x축을 향하고 있으므로 3D vector는 (1, 0, 0)이 된다.
    a = ((1, 0, 0) x NewFacing) / (||(1, 0, 0) x NewFacing||), 회전축 정규화

    3. 다음으로 내적과 arccos을 사용해 회전 각도를 계산한다.

    각도 = arccos((1,0,0)*NewFacing)

    4. 마지막으로 구한 회전축과 각도를 결합해 점 P로 향하는 우주선의 회전을 나타내는 쿼터니언을 생성한다.

    q = [qv, qs]
    qv = a * sin(각도 / 2)
    qs = cos(각도 / 2)

    P가 3D 공간상의 어떤 위치에 있다 하더라도 이 프로세스는 잘 동작한다.

    문제가 발생하는 한 가지 경우는 새롭게 향하게 될 방향과 원래 향했던 방향이 평행할 경우로
    이 경우 외적은 모든 요소가 0인 벡터를 생성한다.
    이 벡터는 길이가 0이므로 벡터 정규화를 위해 0으로 나누면 회전축이 깨진다.
    그러므로 계산하는 과정에 최초의 방향과 새로운 방향이 평행하지 않는지 검증을 해야한다.
    
    평행한 경우 이미 새로운 방향으로 향하고 있음을 뜻한다.
    이 경우 쿼터니언은 항등 쿼터니언이며 회전을 적용할 필요가 없다.
    벡터가 서로 반대 방향을 향한다면 상향 벡터를 기준으로 PI radian만큼 회전시켜준다.
*/
/*
    텍스처 매핑(Texture mapping)

    텍스처 매핑은 삼각형의 표면에텍스처(이미지)를 렌더링하는 기술이다.
    삼각형을 그릴 때 단색을 사용하는 대신 텍스처의 색상을 사용 가능하게 해준다.

    우선 이미지 파일이 필요하다.
    그리고 각 삼각형에 텍스처를 적용하는 방법을 결정해야 한다.
    단순 스프라이트 사각형이라면 왼쪽 상단 모서리는 텍스처의 왼쪽 상단 모서리와
    일치화 시키면 되지만 텍스처는 게임에서 임의의 3D 오브젝트에 사용한다.
    텍스처를 캐릭터 얼굴에 올바르게 적용하려면 텍스처의 어떤 부분이 어떤 삼각형에 해당하는 지를 알아야한다.

    이를 지원하기 위해 vertex buffer의 모든 vertex에 대해 추가적인 정점 속성이 필요하다.
    여태는 3D 위치만 저장했지만 텍스처 매핑을 위해 각 정점은
    이제 해당 정점에 해당하는 텍스처 위치를 지정하는 텍스처 좌표가 필요하다.

    텍스처 좌표는 일반적으로 정규화된 좌표다.
    OpenGL에서좌표는 텍스처의 하단 왼쪽 모서리가 (0, 0)이고 오른쪽 상단 모서리가 (1,1)이다.
    
    u 컴포넌트는 텍스처의 오른쪽 방향을 정의하고,
    v 컴포넌트는 텍스처의 위쪽 방향을 정의한다.

    그래서 많은 곳에서 텍스처 좌표의 동의어로서 UV 좌표라는 용어를 사용한다.

    OpenGL은 텍스처의 왼쪽 하단을 원점으로 사용하므로 하단의 행에서 
    시작하는 이미지 픽셀 데이터 포맷을 기대한다.
    그러나 대부분의 이미지 파일 포맷은 자신의 데이터 시작을
    상단 행에서부터 시작해서 저장한다.
    이 차이를 고려하지 않으면 거꾸로 된 텍스처가 나타난다.

    해결방안은 여러 가지 방법이 있다.

    1. V 컴포넌트를 뒤집는다.
    2. 이미지를 반전시켜서 로드한다.
    3. 디스크에 이미지를 뒤집어서 저장한다.

    지금은 첫번째 방법을 사용한다.
    즉, 왼쪽 상단 구석이 (0, 0)이라고 가정한다.
    이 형식은 DirextX가 사용하는 텍스처 좌표 체계에 해당한다.

    삼각형의 각 정점은 자신만의 별도의 UV 좌표를 가진다.
    삼각형의 각 정점에 대한 UV 좌표를 알고 있다면 3개 정점 각각으로부터 거리를
    기반으로 텍스처 좌표를 블렌딩(보간, interpolatin)해 삼각형 내부의
    모든 픽셀을 채운다.
    
    삼각형의 정확한 중심에 있는 픽셀은 세 정점의 UV 좌표 평균값에 해당한다.
    (무게중심 벡터)
    (삼각형 (0,0), (0, 1), (1, 0)이 있을 때 중심은 (0.3, 0.3)이 되고 UV의 좌표 평균값에해당한다.)

    2D 이미지는 색상이 다른 픽셀들의 격자에 불과하다.
    그래서 텍스처 좌료를 얻었으면 UV 좌표를 사용해 텍스처의 특정 픽셀을 구해야 한다.

    이 텍스처의 픽셀은 텍스처 픽셀(Texture pixel)또는 텍셀(texel)이라 부른다
    GPU는 샘플링(sampling)이란 프로세스를 통해 특정 UV 좌표에 해당하는 텍셀을 선택한다.

    정규화된 UV 텍스처의 문제점은 약간의 차이만 있는 두 UV 좌표의 경우
    이미지 파일에서 같은 텍셀을 선택할 수 있다는 점이다.
    UV 좌표에서 가장 근접한 텍셀은 선택하고 그 텍셀을 색상으로 사용하는 것을
    최근접 이웃 필터링(nearest-neighbor filtering)이라 한다

    이 방법의 문제점은 가까이에서 볼수록 각 개별 텍셀이 화면상에서 매우 커지므로
    텍스처는 뭉특해지거나 픽셀레이션(pixelation)돼 나타난다.
    (픽셀레이션 : 각 픽셀들이 보이는 효과)

    해결책으로 이중 선형 필터이(bilinear filtering)을 사용한다.
    이걸 사용하면 가장 가깝게 인접한 각 텍셀의 블렌딩을 기반으로 색상을 선택한다.

    나중에 텍스처 품질을 향상시키는 방법을 공부한다.

    OpenGL에서 텍스처 매핑을 사용하려면 3가지 작업을 해야한다.

    1. 이미지 파일(텍스처)을 로드하고 OpenGL 텍스처 오브젝트 생성
    2. vertex format에 텍스처 좌표를 포함하도록 갱신
    3. 텍스처를 사용하도록 셰이더를 갱신

*/
/*
    변환 기초(Transform)

    이미 존재하는 하나의 오브젝트로 여러개의 같은 오브젝트를 생성할 때
    일일히 정점 배열을 만들거나 새로 갱신하는 것 대신
    NDC 단위 정점 버퍼 하나만 가지고 스프라이트를 임의의 위치, 크기, 방향을 가지도록
    변경하거나 변환하면 된다.
    
    한 유형의 오브젝트에 대해 하나의 vertex buffer만을 재사용한다는 기술은
    3D에서도 사용가능하다.

    오브젝트 공간

    3D 모델링 프로그램을 사용해 오브젝트를 만들 때 일반적으로 
    정규화된 장치 좌표로 정점 위치를 나타내는 대신 오브젝트 그 자체의
    임의의 원점에 상대적이다.

    이 원점은 오브젝트의 중심이다.
    이 오브젝트에 상대적인 좌표 공간을 오브젝트 공간(object space)또는 모델 공간(model space)라 한다.
    즉, 각 오브젝트의 정점 위치가 해당 모델 고유의 오브젝트 공간 원점에 상대적이란 의미이다.

    좌표 공간을 정의하기 위해 좌표 공간의 원점과 좌표 요소가 증가하는 방향(기저 벡터)가 필요하다.

    게임을 실행하면 각각의 고유 모델은 자신의 정점 배열 개체(VAO, vertex array object)에 로드된다.
    (ex: 모니터의 VAO, 키보드의 VAO 등등)
    장면을 그릴 때 각 오브젝트의 vertex는 vertex shader로 전달된다.
    하지만 직접 넘긴 정점 모델 좌표는 NDC가 아닌 각 오브젝트 고간에 상대적인 좌표라 문제가 된다.
    즉, 의미 없는 출력이 된다.

    세계 공간(world space)

    여러 오브젝트들이 다른 오브젝트 공간 좌표를 갖는 문제를 해결하려면 먼저
    게임 세계 그 자체에 대한 좌표 공간을 정의해야 한다.

    세계 공간은 자신만의 원점과 기저 벡터를 가지고 있다.
    세계 공간의 원점은 보통 게임 세계의 중심이다.

    게임상의 오브젝트는 세계 공간 원점에 상대적인, 임의의 위치와 크기, 방향을 가진다.

    같은 오브젝트 5개가 세계 공간에 놓일 때 각 오브젝트는 어떻게 세계 공간에 표현될지 설명하는 정보가 필요하다.
    각 오브젝트는 그릴 때 같은 정점 배열 개체를 사용한다.
    그러나 오브젝트 공간 좌표(model space)를 세계 공간으로 변환하는 방법을 지정하는 추가적인 정보가 필요하다.
    이 데이터는 인스턴스를 그릴 때 vertex shader로 보낼 수 있으며, 필요에 따라 정점 좌표를 보정하는데 쓰인다.
    GPU는 정점 위치를 그리기 위해 NDC 좌표를 필요로 하므로 vertex를 세계 공간으로 변환한 후에도 추가적인 단계가 필요하다.


*/
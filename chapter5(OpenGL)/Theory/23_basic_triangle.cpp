/*
    삼각형 기초

    2D/3D 그래픽 요구 사항은 크게 다르지 않다.
    대부분의 2D 게임은 2D 캐릭터에 스프라이트를 사용한다.
    3D 게임은 시뮬레이션된 3D 환경을 어떻게든 평평한 2D 이미지로
    만들어서 화면상에 표현한다.

    초기 2D 게임은 스프라이트 이미지를 색상버퍼의 원하는 위치에 간단히 복사할 수 있었다.
    블리팅(blitting)이라고 불리는 이 과정은 NES(Nintendo Entertainment system)같은
    스프라이트 기반 콘솔 게임기에선 효율적이었지만 현대의 그래픽 하드웨어에서는
    블리팅이 비효율적인 반면 폴리곤 렌더링은 매우 효율적이다.

    그렇게 2D/3D 모두 최근엔 폴리곤을 사용한다.

    왜 폴리곤(다각형)을 쓸까?

    폴리곤은 런타임 시 많은 계산이 필요하지 않다.
    폴리곤은 크기를 가변적으로 조절할 수 있다.
    하드웨어 성능이 떨어지는 곳에선 폴리곤의 수를 떨어뜨린 3D 모델을 사용할 수 있따.
    그리고 대부분의 3D 오브젝트를 폴리곤으로 표현할 수 있다는 중요한 점이다.

    삼각형은 대부분의 게임에서 선택하는 폴리곤이다.
    가장 간단한 폴리곤이며, 삼각형 형성을 위해 오직 3개의 정점(vertex)만 필요하다.
    
    삼각형은 한 평면에만 놓일 수 있따.
    즉, 삼각형의 세 점은 동일 평면상에 있어야 한다.

    삼각형은 쉽게 테셀레이션(tessellation)할 수 있는데, 이는 복잡한 3D 물체를
    여러 개의 삼각형으로 쉽게 나눌 수 있다는 것을 뜻한다.
    그리고 사각형 같은 폴리곤이 한 평면상에 놓일 수 있다면 다른 폴리곤도 사용할 수 있따.

    정규화된 장치 좌표

    삼각형을 그리기 위해 세 정점(vertex)의 좌표를 지정해야 한다.
    SDL에서 화면 왼쪽 상단 좌표는 (0,0), 스크린 좌표계, 양수 x는 오른쪽, 양수 y는 아래쪽으로 향했따.

    일반적으로 좌표공간(coordinate space)은 원점의 위치가 어디이며, 좌표가 어느 방향을 ㅗ증가하는지를 지정한다.
    좌표 공간의 기저 벡터(basic vector)는 좌표가 증가하는 방향을 나타낸다.

    기본 기하학에서 좌표 공간 한 가지로 직교 좌표계(Cartesian coordinate system)이 있따.
    2D에서 원점(0,0)은 일반적으로 중심이며 양수 x는 오른쪽, 양수 y는 위쪽을 향한다.

    정규화된 장치 좌표(NDC< Normalized device coordinates)는 OpenGL에서 사용하는 기본 좌표계다.
    OpenGL 윈도우에서 윈도우의 중심은 정규화된 장치 좌표의 중심이다.
    아래 왼쪽은 (-1, -1), 상단 오른쪽은 (1, 1) 이다.
    이 좌표 체계는 윈도우의 너비, 높이와 관계없다.
    내부적으로 그래픽 하드웨어는 이 NDC를 해당 윈도우와 일치하는 픽셀로 변환한다.
    3D에서 정규화된 장치 좌표의 z 요소 또한 [-1, 1]의 범위를 가진다.
    z 값은 화면 안으로 들어가는 방향이다.

    정점 버퍼와 인덱스 버퍼(vertex buffer and index buffer)

    여러 개의 삼각형으로 구성된 3D 모델이 있다고 가정할 때, 이 삼각형의 정점을 메모리상에
    저장하기 위해 인접한 배열이나 버퍼 형태로 각 삼각형의 좌푯값을 직접 저장한다.

    정점의 배열은 일부 중복 데이터를 갖고 있다.
    이 중복을 제거할 수 있는 방법이 있다면 버퍼에 저장된 값의 수를 33% 줄일 수 있다.
    즉, 중복 좌표로 인해 낭비되는 메모리의 양을 줄일 수 있다.

    해결법은 2단계로 나눠 접근한다.

    1. 3D 기하에서 사용한 고유한 좌표만을 담은 정점 버퍼(vertex buffer)를 생성한다.
    2. 각 삼각형의 정점을 지정하기 위해 정점 버퍼에 index를 붙인다(배열에 index 붙이는 것처럼).
    
    인덱스 버퍼(index buffer)는 인덱스 3개로 구성된 개별 삼각형 정보를 배열 형태로 저장한다.
    인덱스는 부동소수점 요소가 아닌 정점 번호이다.
    또한 코드에서 인덱스 버퍼에 unsigned short(일반적으로 16비트)를 사용해 인덱슽 버퍼의 메모리 사용 공간을 줄인다.
    더 작은 비트 크기의 정수를 사용하는 것도 가능하다.

    즉 정점 + 인덱스 버퍼의 조합은 많은 메모리를 절약할 수 있따.

    OpenGL에서 정점, 인덱스 버퍼를 사용하려면 사용하겠다고 알려야한다.
    정점 배열 개체(vertex array object)를 사용해 정점 버퍼와 인덱스 버퍼, 정점 레이아웃(vertex layout)을 캡슐화한다.

    정점 레이아웃(vertex layout)은 모델의 각 정점에 저장할 데이터를 지정한다.
    지금은 3D 위치라고 가정한다(2D에선 z값을 0으로 사용하면 된다).
    추후에 다른 데이터를 추가한다.

    모든 모델은 정점 배열 개체를 필요로 하므로 VertexArray 클래스를 만들어 캡슐화하면 좋다. 

    

*/
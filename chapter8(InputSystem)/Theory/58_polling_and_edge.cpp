/*
    입력 장치

    게임은 키보드, 마우스, 등 다양한 입력 장치와 상호작용을 한다.
    보통 게임 루프의 '프로세스 입력' 단계 동안 입력 장치의 현재 상태를 가져온다.
    그리고 현재 입력 상태는 게임 세계 갱신 단계 동안 게임 세계에 영향을 미친다.

    일부 입력 장치에서는 이진값만을 얻을 수 있따.
    (ex: 키보드에서의 각 키 상태(true/false), 반쯤 눌러졌는지는 알 수 없다.)
    
    다른 입력 장치는 값의 범위를 제공한다.
    (ex: 조이스틱(두 축의 범위값))

    게임에서 사용하는 대부분의 장치는 복합적이려, 여러 유형의 입력이
    하나의 장치에 결합돼 있다는 걸 뜻한다.
    일반적인 컨트롤러는 이진값만 얻을 수 있는 버튼과, 범위값을 제공하는 2개의 조이스틱,
    트리거를 가진다.
    비슷하게 마우스의 이동과 스크롤 휠은 범위 값이지만 버튼은 이진값이다.

    폴링(polling)

    폴링은 프레임마다 특정 키의 값을 확인하는 접근법이다.
    초반 챕터3 등에서 KeyboardState 함수로 키보드 상태를 얻어 플레이어를 이동시켰다.
    이런 액션 실행 여부를 결정하기 위해 특정 키의 상태를 프레임마다 조사했따.
    폴링 기반 입력 시스템은 개념적으로 단순해 이해하기 쉽다.

    폴링은 프레임마다 일부 입력 장치의 상태를 알아야하며,
    입력 장치의 상태를 기반으로 캐릭터 이동을 갱신하기에 특히 캐릭터 이동 등에 잘 동작한다.
    그래서 많은 게임 개발자가 폴링 접근법을 선호한다.

    상승 에지(positive edge, rising edge)와 하강 에지(negative edge, falling edge)

    스페이스 누르면 캐릭터가 점프하는 게임이 있을 때 프레임마다 스페이스바의 상태를 체크해야 할 것이다.
    스페이스마를 4번쨰 프레임에 눌렀다 6프레임 이후에 손을 뎻다면
    x축(프레임 시간), y축(프레임의 이진값)인 그래프에서 4프레임때 0에서 1로 변경됬다
    6프레임에 1에서 0으로 변경된다.

    입력이 0에서 1로 변하는 프레임은 상승 에지, 1에서 0으로 변하는 프레임을 하강 에지라고 한다.

    if (spacebar == 1)
        character.jump()
    가 코드라면 4, 5프레임 각각 한번씩 두번 호출된다.
    만약 10프레임동안 버튼을 누르면 jump함수가 10번 호출되는 것이다.
    하지만 값이 1일 때 프레임마다 캐릭터를 점프하는 대신 스페이스바 값이
    상승 에지를 가진 프레임에서만 점프하면 좋을 것이다.

    상승 에지에서만 처리하면 플레이어가 스페이스바를 얼마나 오래 누르고
    있든 상관없이 한번만 점프한다.

    if(spacebar has positive edge)  // 프레임에서 키가 0이었고 현재 프레임에서 1
        character.jump()

    하지만 SDL_GetKeyboardSate는 맞지 않고 0으로 초기화된 spacebarLast 변수를 추가해
    마지막 프레임의 값을 추적하고 변수를 사용해 마지막 프레임이 0이고 현재 프레임의 값이 1인
    경우에만 점프하게 한다.

    if (spacebar == 1 and spacebarLast == 0)
        character.jump()
    spacebarLast = spacebar
    
    코드 전반에 이 패턴을 사용하는 것보단 이전 프레임 키값을 추적하는 시스템을 구축하면 더 좋다.
    이를 통해상승 에지인지 또는 하강 에지인지를 쉽게 확인 가능하다.

    입력 마지막 프레임의 값을 저장하고 그 값을 현재 프레임의 값과 비교하는
    접근법을 일반화 하면 4가지 가능성이 있다.

    1. 마지막 프레임 = 0, 현재 프레임 = 0, 버튼 상태 = None
    2. 마지막 프레임 = 0, 현재 프레임 = 1, 버튼 상태 = Pressed
    3. 마지막 프레임 = 1, 현재 프레임 = 0, 버튼 상태 = Released
    4. 마지막 프레임 = 1, 현재 프레임 = 1, 버튼 상태 = Held

    하지만 w가 1인 앞으로 이동하는 액션에 대해서는 해당 프레임의 입력값ㅇ르 확인하는
    이전 방법이 더 좋다.
    마지막 프레임을 확인하는 입력 시스템은 이 기본값을 조회하거나
    다양한 입력 상태를 조회하는 옵션을 제공한다.


*/
/*
    이번 프로젝트는 InputSystem을 만들었고
    2D 게임에서 컨트롤러를 이용해 조작을 가능하게 한다.

    요약

    다양한 입력 장치가 게임에 사용된다.

    장치는 이진값이나 입력에 범위가 있는 값을 알려준다. 
    간단히 온/오프(true/false) 상태를 알리는 키/버튼에 대해서는 현재 프레임의 값과
    이전 프레임의 값 사이의 차이를 고려하면 된다.
    이를 통해 'pressed'와 'released' 상태에 해당하는 입력의 상승 에지와 하강 에지를 감지할 수 있다.

    SDL은 키보드/마우스/컨트롤러를 포함한 가장 일반적인 장치를 지원한다.
    각 장치의 입력 정보를 InputState 구조체에 추가한뒤 각 액터의 ProcessInput 함수에 전달한다.
    그러면 Actor는 입력의 현재값과 하강 에지, 상승에지에 대한 입력 상태 조회도 가능해진다.

    트리거나 아날로그 스틱처럼 값의 범위를 제공하는 장치의 경우는
    일반적으로 해당 데이터를 필터링하는 작업이 필요하다.
    필터링은 장치가 정지 상태에 있어도 장치는 잘못된 신호를
    보낼 수 있기 때문에 이를 방지해준다.

    챕터8에서 구현한 필터링은 데드 존보다 작은 입력은 무시하고,
    입력이 거의 최대인 경우에는 푀대 입력값으로 설정했다.


    연습 

    1. 여러 컨트롤러를 지원하기 위해 InputState 구조체에 
    여러개의 ControllerState 인스턴스가 있어야 한다.
    최대 4개의 컨트롤러를 동시에 지원하는 코드를 추가하자.
    초기화 시에는 연결된 컨트롤러를 감지하는 코드를 수정해 개별적으로 활성화시키자.
    그리고 하나의 컨트롤러 대신 모든 4개의 컨트롤러를 갱신하도록 Update 함수를 수정한다.

    마짐가으로 컨트롤러를 중간에 연결/해제 시 동적으로 컨트롤러 추가/제거를 위해
    SDL 이벤트를 감지하는 코드는 작성한다.

    2. 액션에 대한 기본 입력 매칭 지원을 추가한다.
    구현을 위해 액션을 장치와 해당 장치상의 버튼/키 매핑하는 텍스트 파일 포맷을 만든다.
    ex) '발사' 액션이 컨트롤러상의 A 버튼에 일치하도록 지정하는 엔트리
        Fire,Controller,A

    그후 InputSystem에서 이 데이터를 parsing한다.
    그리고 맵에 저장하고 InputState에 GetMappedButtonState 함수를 추가하자.
    이 함수는 액션 이름을 인자로 받은 뒤 해당 장치의 ButtonState를 반환한다.

    함수의 선언 ex)
    ButtonState GetMappedButtonState(const std::string& actionName);
*/
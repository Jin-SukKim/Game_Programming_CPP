/*
    이벤트

    SDL은 다양한 이벤트를 생성하고, 프로그램은 이 이벤트에 대해 선택적으로 응답했다.
    SDL의 SDL_KEYDOWN 이벤트는 키를 누를때, SDL_KEYUP은 키를 뗄 때 발생한다.
    상승 에지와 하강 에지 시스템에 이용할 수 있다.

    그러나 앞으로 이동하기 위해 w키를 누르는 경우 SDL 이벤트는 상승, 하강 에지만 제공하기에
    W키를 계속 누르는지는 추가 코드가 필요하다.
    이벤트를 기반으로 입력 시스템을 새로 설계도 가능하나 마우스 휠 스크롤같은 경우 SDL 이벤트를 사용한다.

    SDL_GetKeyboardState에서 가져온 키보드 상태는 메시지 펌프 루프에서 
    SDL_PollEvents를 호출한 후에만 갱신된다.
    이는 코드가 이 폴링함수를 호출하는 위치를 알기에 상태 데이터가 언제
    변경되는지를 안다는 것을 의미한다.
    상태 데이터가 변경되는 시점을 알수있으면 이전 프레임의 데이터를 저장하는
    입력 시스템을 구현하는 데 도움이 된다.

    기본 입력 시스템 아키텍처

    여태는 Actor나 컴포넌트가 함수 ProcessInput 호출을 통해 입력을 인식했다.
    아지만 ProcessInput이 SDL 함수를 직접 호출하지 않으면 입력장비에 접근할 수 없다는 걸 뜻한다.
    간단한 게임에서는 잘 동작하지만 문제점이 있다.
    그리고 일부 SDL 입력함수는 함수 호출 간 상태 차이를 반환한다.
    한 프레임 동안 이런 함수를 두 번 이상 호출하면 첫 번째 호출 다음에는
    상태 변화가 없음을 뜻하는 0의 값을 얻을 것이다.

    문제 해결을 위해 InputSystem 클래스를 생성해 InputState라는 헬퍼 클래스에 데이터를 채운다.
    그 후 ProcessInput을 사용해 Actor/컴포넌트에 상수 참조로 전달한다.
    또한 Actor/Component가 다른 상태를 쉽게 조회하도록 InputState는 다른 헬퍼 함수를가진다.

    먼저 상승, 하강에지의 4가지 상태를 ButtonState enumerator를 선언한다.
    그리고 InputState 구조체를선언한다.
    InputSystem은 SDL_PollEvents 전에 호출되는 PrepareForUpdate 함수를 가진다.
    이벤트를 폴링한 후 호출되는 Update 함수도 있다.
    GetState 함수는 멤버 데이터를 가진 InputState의 상수 참조를 반환한다.

    입력 시스템을 게임에 통합하기 위해 InputSystem 포인터형의 변수를 Game 멤버 데이터로 추가한다.
    Actor/Component의 ProcessInput도 InputSystem을 사용하도록 변경한다.

    이제 몇몇 입력 장치에 대한 지원을 추가하는데 필요한 기본사항을 갖췄고
    이 각각의 입력 장치 지원ㅇ르 위해 상태를 캡슐화한 새로운 클래스를 제작한 뒤,
    해당 클래스의 인스턴스를 InputState 구조체에 추가한다.


*/
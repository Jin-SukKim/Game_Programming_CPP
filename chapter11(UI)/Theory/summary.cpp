/*
    프로젝트

    Game 클래스는 UIScreen 클래스와 PauseMenu, DialogBox 클래스는 담는 UI 스택을 가진다.
    HUD는 조준망과 레이더를 지원하고 텍스트 현지화 방법을 구현했다.

    요약

    SDL TTF 라이브러리를 사용해 트루타입 폰트를로드하고 텍스트를
    텍스처로 렌더링이 가능해 폰트를 렌더링하는 데 편리하다.

    UI스택 시스템에서는 UI 스택상의 요소로서 유니크한 UI 스크린을 표현했다.
    어떤 시점에서든지 UI의 최상단 스크린은 플레이어로부터 입력을 받을 수 있따
    이 시스템을 다이얼로그 박스와 버튼도 지원하도록 확장했다.

    HUD는 게임에 따라 여러 요소를포함한다.
    물체를 겨냥ㅎ마에따라 변하는 조준망은 플레이어가 어떤 물체를겨냥하고 있는지를
    결정하기 위해 충돌 감지가 필요하다.
    플레이어가 목표물을 겨냥하면 HUD는 다양한 텍스처를 그린다.
    레이더에서는 레이더상에 신호를 어디에 그릴지 결정하기 위해 플레이어와
    적 오브젝트를 X/Y 평면에 퉁여한 뒤 이 변환된 좌표를 사용했다.

    UI는 다양한 로케일의 텍스트를 다루는 코드가 필요했다.
    간단한 맵 구조를 사용하면 텍스츠 키와 텍스크 값 간의 변환이 가능하다.
    이 텍스트 값에 UTF-8 인코딩을 사용하면 상대적으로 현지화 작업이 편해진다.
    RapidsJSON 라이브러리는 UTF-8로 인코딩된 JSON 파일을 로드 가능하며,
    SDL_TTF는 UTF-8 문자열 렌더링을 지원한다.

    연습

    1. 메인 메뉴를 만든다.
    game 클래스에 EMainMenu랑 새로운 상태를 추가하고  메뉴 옵션에 시작과 종료가 있는
    UI 스크린을 화면에 띄운다.

    2. 액터가 플레이어 위에 있는지 또는 아래에 있는지에 따라 다양한 신호 텍스처를
    사용하도록 레이더를 수정한다.
    제공된 BlipUp.png 파일과 BlipDown.png 텍스처를 사용한다.
    높이 구별을 위한 타깃 액터의 위치를 명시적으로 변경해 사용해야 한다.

    3. 특정 액터를가리키는 2D 화살표를 화면상에 구현하자.
    ArrowTarget이란 새로운 액터를 만들고 게임 세계 어딘가에 배치한다.
    그 후 HUD에서 플레이어로부터 ArrowTarget까지의 벡터를 계산한다.
    화면상의 2D 화살푤르 회전시킬 각도를 결정하기 위해 x-y 평면상에서
    이 액터와 플레이어 전방 벡터 사이의 각을 사용한다.
    마지막으로 텍스처 회전(회전행렬)을 지원하도록 UIScreen::DrawTexture에 코드를 추가한다

*/
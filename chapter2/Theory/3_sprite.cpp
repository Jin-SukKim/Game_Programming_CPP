/*
    스프라이트(sprite)는 캐릭터나 배경 그리고 기타 동적인 물체를 나타내는 데 사용되는
    일반적인 2D 게임상의 시각적 오브젝트다.
    2D 게임에선 널리 사용되므로 효율적으로 사용하는 것이 중요하다.

    각 스프라이트는 이미지 파일을 하나 이상 갖고 있다.
    다양한 이미지 파일 포맷이 존재하다(PNG, PVR, DXT etc)

    이미지 파일 로딩(SpriteComponent 클래스)

    현재 예제에선 SDL 이미지 라이브러리를 사용해 파일을 로드한다.

    여러 ACtor에 같은 이미지 파일을 사용하는 것은 게임에서 매우 일반적이다.
    (ex: 운석이 20개 있을 때 각 운석에 20번 이미지 파일을 로드하면 낭비하는 것이다)

    즉, 이미지 데이터는 여러 Actor(게임 오브젝트)가 공유해서 사용하므로 싱글턴 클래스에 가까운
    Game(예시)에 파일 이름과 SDL_Texture 포인터를 쌍으로 한 맵을 만들어두면 좋다.
    
    텍스처의 이름을 인자로 받고 이름과 일치하는 Texture 포인터를 반환하는 함수를 만들어
    이미 맵에 존재하는지확인하고 존재한다면 텍스쳐 포인터를 return하고 아니라면
    이미지를 load하는 식으로 관리한다.
    (단순한 게임에선 Map으로 관리해도 충분하지만 복잡한 게임의 Assets(텍스쳐, 사운드, 3D 모델 등,)을 관리하는 경우
    따로 관리 시스템을 구현하는게 좋다.)

    LoadData 함수를 구현해 모든 Actor를 생성할 책임을 가진다.
    지금은 하드코딩해서 Actor를 로드하지만 레벨 파일에서 Actor를 로딩하는 기능이 있으면 좋다.

    스프라이트 그리기(AnimeSpriteComponent 클래스)

    2D 게임에 배경과 캐릭터가 있을 때 배경을 먼저 그리고 캐릭터를 그리는게 간단한 방법이다.
    이러한 접근법을 화가 알고리즘(painter's algorithm)이라 불린다.
    스프라이트를 뒤쪽에서 앞쪽숱으로 그린다.

    2D에서 화가 알고리즘은 문제없지만 3D 게임에선 문제가 발생한다.

    현재 Chapter2에선 게임 오브젝트의 위치가 화면상의 위치와 일치한다는 가정하에 진행되는데
    이것은 게임 세계가 정확히 화면과 일치하는 게임에서만 유효하다(지렁이 게임, 물건 피하기 게임 등)

    슈퍼 마리오 같은 게임은 단일 화면보다 훨씬 더 큰 게임 세계를 가지고 있으므로 위와 같은 방식으론
    동작하지 않고 카메라의 위치를 구현해야 한다.

    스프라이트 애니메이션

    대부분의 2D 게임은 플립북 애니메이션(flipbook animation)같은 기술을 사용해
    스프라이트 애니메이션을 구현한다.
    이건 빠르고 연속적으로 일련의 정적인 2D 이미지를 넘겨서 움직임의 환영을 만드는 기법이다.

    스프라이트 애니메이션의 프레임 레이트는 다양하지만 보통 24FPS를 사용한다.(영화에서 사용하는 전통적인 FPS)
    격투게임 같은 경우 60FPS를 사용하기도 하는데 이미지의 수가 매우 증가하게 된다.

    재생하는 가장 간단한 방법은 각 프레임과 일치하는 여러 이미지들의 Vector를 가지는 것이다.

    스프라이트 애니메이션의 프레임 레이트를 동적으로 변화시키면 캐릭터의 움직임이
    빨라지거나 느려지는 것처럼 보이게 할 수 있다.
    

*/
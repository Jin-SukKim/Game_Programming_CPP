/*
    뉴턴 물리(Nrwtonian physics, 고전 물리)

    실제 세계와 유사한 이동에 관해서는 물리적으로 정확한 접근이 필요하다.
    아이작 뉴턴이 운동 법칙을 설명하려고 뉴턴 물리를 구축했다.

    게임에서는 일반적으로 뉴턴 물리를 활용한다.
    물체가 빛의 속도에 근접할 정도로는 이동하지 않고 양자 입자보다 크다면
    뉴턴 물리가 제대로 성립하기 때문이다.

    이 책에서는 오직 회전력이 없는 운동 또는 선형 역학(Linear mechanics)처럼
    가장 기본적인 운동만을 고려한다.
    (다른 부분은 이안 밀링턴,Ian Millington의 서적이나, 대학 수준의 물리학 서적을 참조한다)

    선형 역학 개요(Linear Mechanics)

    선형 역학의 2가지 핵심은 힘과 질량이다.
    
    힘(Force)은 크기와 방향을 갖고 있으므로 벡터로 표현하는 것이 자연스럽다.(물체 이동에 영향)
    질량(Mass)은 물체에 내포된 물질의 야을 나타내는 스칼라(scalar)다.

    무게와 질량은 다른 것이다.
    질량은 중력과 관계없는 독립적인 값인데 무게는 중력과 관계가 있다.
    질량이 크면 클수록 울체의 운동을 변경하는 것은 어려워진다.

    뉴턴의 제 2운동법칙(Newton's second law of motion)
    물체에 힘이 충분히 주어지면 물체는 움직이기 시작한다.

    F = ma, F = 힘, m = 질량, a = 가속도

    게임에서 임의의 물체는 질량을 갖고 있으며, 그 물체에 힘(벡터)을 가하는 것은 일반적인 접근법이다.
    개발자는 이 접근법으로 물체의 가속도를 계산한다.

    물리학 과정에서 선형 역학(Linear Mechanics)은 위치와 속도와 가속도를 시간에 따른
    함수로 표현하며 이 함수는 기호로 표현된다.
    미적분을 사용해 속도 함수를 위치 함수의 미분으로 표현하고,
    가속도 함수를 속도 함수의 미분으로 표현한다.

    하지만 이 표준 공식은 기호로 된 방정식이고 미분이 사용되므로 게임에 적용은 어렵다.
    게임에선 물체에 힘을 가한 시간 변화에 따른 가속도를 구하는 것이 필요하다.

    게임에서는 delta time즉 이산 시간 값을 사용해 계산하므로 적분을 사용한다.
    기호로 표현되는 적분이 아닌 수치 적분을 사용한다.
    수치 적분은 고정된 시간 간격을 근사화한다. 

    오일러 적분을 사용한 위치 계산

    수치 적분을 통해 게임은 가속도를 기반을 속도를 갱신하고 속도를 기반으로 위치를 갱신한다.
    가속도 계산을 위해 물체에 적용된 힘(Vector)뿐만 아니라 질량도 알 필요가 있다.

    고려해야 할 힘의 종류

    1. 일정한 힘 (중력 등)
    2. 단일 프레임에 적용되는 힘(충격Impulse 등)
    ex) 캐릭터 점프 = 반발력으로 땅에서 벗어나고 중력의 영향으로 땅에 돌아온다.

    다양한 힘이 물체에 동시에 작용하며 모든 힘은 벡터이므로 
    모든 힘들 더하면 해당 프레임마다 물체에 적용될 전체 힘을 구할 수 있다.
    힘들의 총합을 질량으로 나누면 가속도를 얻는다(a = F/m)

    acceleration = sumOfForces / mass;

    속도와 위치를 계산하기 위해수치 적분인 오일러 적분(Euler Integration)을 사용한다.

    velocity += acceleration * deltaTime;   // 힘, 가속도, 속도, 위치가 모두 벡터로 표시된다.

    (deltaTIme에 의존하므로 물리를 시뮬레이션하는 Component의 Update 함수에 넣어준다.)

    가변 시간 단계 문제

    물리 시뮬레이션에 의존하는 게임의 경우 가변 프레임 시간(또는 시간 단계time step)은 문제가 된다.
    수치 적분의 정확도가 시간 단계의 크기에 의존하기 때문이다.
    시간 단계가 작을수록 근사값은 더 정확하다.

    프레임 레이트(FPS)가 프레임마다 다를 경우 수치 적분의 정확도가 달라진다.
    정확도는 게임 동작에 매우 큰 영향을 미친다.
    (프레임 레이트가 낮을 수록 캐릭터가 더 멀리 점프하는 등)
    프레임 레이트가 낮을수록 수치 적분의 오차가 커져서 그런다.

    결국 물체의 위치를 계산하는 물리를 사용하는 게임에서는 가변 프레임 레이트를
    사용하지 말고 프레임을 제한하는 접근법을 사용하자.
    목표 프레임 레이트를 초과하지 않으면 잘 동작한다.

    더 복잡한 대안책으로는 큰 시간 단계를 고정된 크기의 물리 시간 단계로 나누는 것을 고려해본다.


*/
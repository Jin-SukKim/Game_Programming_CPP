/*
    벡터(Vector) - 차원당 하나의 요소를 사용해 n차원에서의 크기와 방향을 나타낸다.

    v = (vx, vy)
    벡터는 위치 개념이 없고 크기와 방향을 가지고 있다

    벡터의 시작 부분이나 꼬리 부분을 원점에 위치하도록 그리면 공간상의
    특정한 점을 가리키고 있는 것으로 생각할 수있다.

    게임에선 벡터의 방향성을 사용해 오브젝트의 방향을 표현하기도 한다.
    오브젝트의 전방 벡터(Forawrd vector)가 나아가는 방향을 나타내는 벡터이다.
    (x축을 따라 이동하는 전방 벡터는 (1, 0)이다.)

    일반적으로 벡터 연산을 위해 라이브러리를 사용하므로 어떤 문제를 해결할 수 있는지
    알고있는 것이 좋다.

    벡터의 뺼셈
    한 벡터의 각각의 구성 요소와 일치하는 다른 벡터의 구성 요소를 빼면
    새로운 벡터를 얻을 수 있따.

    벡터의 뺄셈은 순서에 영향을 받는다.
    (b - a와 a - b는 다르다.)

    벡터 a,b의 뺼셈
    c = b - a = (bx - ax, by - ay)

    벡터 스케일링(scale) : 스칼라 곱

    scalar(단일값)은 벡터에곱할 수 있다.

    벡터 a, 스칼라 s
    s * a = (s*ax, s*ay)

    양의 스칼라 값은 벡터의 크기만 바꾸지만 음수 스칼라 값은
    벡터의 방향도 반전시킨다.

    벡터의 덧셈
    두 벡터의 요소를 더해 새로운 벡터를 만든다
    덧세음 순서에 영향이 없다
    (a + b = b + a)

    벡터 a,b의 덧셈
    c = a + b = (ax + bx, ay + by)

    거리 결정하기 : 길이

    벡터는 크기와 방향을 같는데 크기만구할 수 있다.
    ||a|| = sqrt(ax^2 + ay^2)

    유클리드 거리 공식과 비슷하다.
    이 공식은 원점에서 벡터가 가리키는 지점까지의 거리를 계산한다.

    또한 임의의 두 점 사이의 거리를 계산할 떄도 사용 가능하다.
    두 점 p, q를 벡터로 생각하고 뺄셈을 수행한 값의 크기는 두 점 사이의 거리와 같다.

    distance = ||p - q||

    길이 공식에서 제곱근은 상대적으로 계산 비용이 크다.
    길이를 알기 위해 제곱근을 사용해야 하지만 어떤 경우에는 제곱근 계산을 하지 않아도 된다.

    만약 플레이어가 오브젝트 A, B중 더 가까운 것을 알아야 한다면
    플레이어로부터 각 오브젝트의 거리(벡터 뺄셈)을 청므에구해야 할 것이다.
    하지만 길이의 값끼리 비교하는 것과 길이의 값의 제곱값을 비교하는 것은
    결국엔 동일하기에 제곱근을 하지 않고 비교하면 된다.

    방향결점하기 : 단위 벡터와 정규화

    단위 벡터(Unit Vector)는 1의 길이를 가진 벡터다.
    정규화(Normalization)을 거치면 단위 벡터가 아닌 벡터를 단위 벡터로 변환하는 것이다.

    정규화를 하려면 벡터의 각 요소를 벡터의 길이로 나눠준다.

    단위벡터 u, 벡터 a

    u = (ax / ||a||, ay / ||a||)

    벡터를 정규화하면 계산이 단순해지지만 원래의 크기 정보를 잃을 수 있기에 조심한다.

    그렇기에 오직 방향만 필요로 할 경우에 벡터를 정규화하면 좋다.
    (화살표가 가리키는 방향, 전방 벡터 등)

    일반적으로 물체가 어느 방향으로 향하고 있는지를 나타내는 전방 벡터나
    어느 방향이 위쪽인지를 나타내는 상향 벡터(up vector)를 정규화한다.

    각도로부터 전방 벡터 변환

    chapter2에서 각도가 radian단위인 회전값을 가지고있었다.
    이 값을 이용해 회전을 할 수 있다.
    2D 상의 회전은 단위 원의 각도와 일치한다.

    0(1, 0), PI/2 (0, 1), PI(-1,0), 3PI / 2(0, -1)

    각도를 세타(theta)로 표현한단위 원의 방정식은 다음과 같다.
    
    x = cos각도
    y = sin가도

    벡터 회전시키기(전방 벡터 회전)
    (cos(각도), sin(각도))

    전방 벡터를 각도로 변환 : Arctan

    전방 벡터가 주어졌을 때 각도로 변환하려면 arctan 함수로 각도를 계산해준다.
    Tangent 함수가 각도를 인자로 받고 삼각형의 밑변과 높이의 비율값을 반환한다.

    전방 벡터 v와 x축으로 직각 삼각형을 구성할 떄 v의 x값은 삼각형의 밑변의 길이가 되고
    y는 높이가 된다. 이 값들을 사용해 arctangent 함수로 각도를 계산한다.

    프로그래밍에서는 atan2 함수를 이용해 arctan 함수를 계산한다.
    이 함수는 2개의 파라미터(높이, 밑변의 길이)를 받는다.
    그리고 [-PI, PI] 범위의 각도를 return하는데 양의 각도는 삼각형이 1사분면이나 2사분면에 있고(양의 y값),
    음의 각도는 삼각형이 3사분면이나 4사분면에 있다는 것을 말한다(음의 y값)

    arctan 함수는 2D게임에서 매우 잘 동작하나 3D 게임에서는 다른 접근법이 좋다.
    
    2D 게임에서 회전 시키기
    오브젝트가 움직일 새로운 전방 벡터를 생성한 후 정규화한다.
    atan2 함수를 이용해 새로운 전방 벡터를 각도로 변환하고
    이 각도로 오브젝트의 회전값을 설정한다.

    두 벡터 사이의 각도 구하기 : 내적

    내적(dot product)는 단일 스칼라 값이다.
    게임에서 내적은 일반적으로 두 벡터 사이의 각도를 찾는데 사용된다.

    벡터 a, b의 내적
    a*b = axbx + ayby

    내적은 각의 코사인(cosine)과 관계가 있다
    두 벡터 사이의 각도
    a*b = ||a||||b||cos각도, a의 길이 * b의 길이 * cos 각도
    a,b를 정규화해 단위벡터로 만들면 길이가 1이 되므로 내적은 cos각도와 같다.
    a*b = cos각도
    
    내적의 결과가 0이면 두 벡터가 수직한다는 것을 뜻하고(cos(PI/2) = 0)
    1이면 두 벡터는 평행하며 같은 방향으로 향하고 있고
    -1이면 평행하지만 반대 방향을 향한하는 것을 의미한다.

    arccos 함수를 사용해 각도를 구할 수 있다.

    각도 = arccos(a*b / ||a||||b||)
    만약 두 벡터 a,b가 단위 벡터라면 벡터의 길이는 1이 되므로 분모를 생략할 수 있다.

    각도 = arccos(a*b), 방향만 구하려면 정규화해두는 것이 좋다.
    한가지 결점은 arccos는 [0, PI]범위에서 각도를 반환한다는 것이다.
    그래서 두 벡터 사이의 최소 회전값은 알 수 있지만 시계 방향인지 반시계 방향 회전인지는 모른다.

    내적은 실수의 곱셈처럼 교환, 분배 법칙이 가능하다.

    벡터 v의 내적은 길이 제곱값과 같다.

    v * v = ||v||^2 = vx^2 + vy^2

    법선벡터 계산 : 외적
    
    법선벡터(normal vector)는 표면에 수직한 벡터이다.
    표면(삼각형등)의 법선 벡터를 계산하면 3D 게임에 매우 유용하다.(관원 모델 등)

    평행하지 않은 2개의 3D 벡터가 주어지면 두 벡터를 포함하는 평면은
    반드지 존재한다.
    외적은 그 평면에 수직한 벡터를 구한다.

    외적은 2D 벡터에선 동작하지 않고 3D에서만 사용가능하기에
    2D벡터에 z 요소값을 0을 추가해 사용하면 된다.

    x 기호는 두 벡터 사이의 외적을 뜻한다.
    c = a x b, 벡터 a, b, 법선벡터 c

    외적 게산은 순서가 중요하다.
    평면에 수직인 두번째 벡터 -c가 존재할 수 있다.
    외적에서는 교환 법칙이 성립하지 않지만 교환 후 값을 반전시키면 원래의 외적과 동일하다.
    a x b = - b x a

    왼손 법칙(left-hand rule)을 사용시 외적으로 구한 벡터가 향하는 방향을 알 수있다.
    집게 손가락을 a 방향, 중지 손가락을 b 방향을 향하게 하면 엄지 손가락은 c 방향을 향하게 된다.
    왼손을 사용하면 왼손 좌표계, 오른손을 사용하면 오른손 법칙의 좌표계 등이다.

    외적의 수치 계산

    c = a x b = (aybz - azby, azbx - axbz, axby - aybx)

    외적이 벡터 (0, 0, 0)를 반환하면 벡터 a,b는 평행하다는 것을 뜻하고
    평행한 벡터는 평면을 형성할 수 없다. 그래서 외적은 법선벡터를 만들지 못한다.

    삼각형은 단일 평면상에 놓여 있어외적을 구할 수 있다.
    삼각형 ABC가 있을 때 법선 벡터 구하기

    삼각형 변에 해당하는 두 벡터 만들기
    벡터 u = B - A
    벡터 v = C - A

    두 벡터의 외적을 구하고 정규화시키면 삼각형의 법선벡터가 만들어진다.
    즉 삼각형의 위쪽(바깥쪽)과 아래쪽(안쪽)을 알 수 있다.
    벡터 n = u x v
    단위 벡터 n = n / ||n||
*/
/*
    2D 게임에서 3D 게임으로 전환했다.
    Actor는 이제 3D 위치와 임의의 축에서의 회전을 위한 쿼터니언을 가진다.

    3D 장면은 더 복잡한 뷰-투영 행렬을 필요로 한다.
    look-at 행렬의 사용은 뷰 행렬을 생성하는 데 선호되는 방법이다.
    (카메라에 사용된다.)
    투영 행렬은 직교 행렬 또는 원근 행렬을 사용하지만 원근 투영이 장면에
    깊이를 부여한다.
    3D 게임은 어떤 픽셀이 화면에 보일지를 결정하기 위해
    깊이 버퍼(z-buffering)을 사용하고 화가 알고리즘은 2D와
    투명 오브젝트(강가, 바다 등 물)에 사용된다.

    심플한 gpmesh 파일 포맷은 복잡한 파일 포맷의 쓸모없는
    데이터를 제거했으며, 실행 시 3D 모델에 대한 index buffer와 vertex buffer를
    생성하는 데 충분한 정보를 포함한다.
    MeshComponent 클래스는 모든 actor에 붙을 수 있으며, 셰이더를 통해
    3D 메시 렌더링이 구현된다.

    게임에는 여러 광원을 사용할 수 있다.
    주변광과 방향광은 전체 장면에 영향을 미치는 반면 점광과
    스포트라이트는 오직 특정 지역에만 영향을 미친다.
    조명이 장면에 얼마나 영향을 미치는지 근사하는 한 가지 방법은
    퐁 반사 모델을 사용하는 것이다.

    퐁 반사 모델은주변반사, 난반사, 정반사의 3가지 구성요소를 가진다.

    연습

    1. 메시 렌더링 코드를 수정해 여러 셰이더로 다양한 메시를 그리도록 구현한다.
    이를 위해 맵에 여러 셰이더를 저장하고, 각 셰이더에 자신만의 uniform이
    제대로 설정됐는지를 검증하는 작업이 필요하다.

    셰이더 간 빈번한 전환은 비효율적이다.
    이 문제를 해결하고자 해당 셰이더 별로 메시 컴포넌트를 그룹화한다.
    (ex: 10개의 메시가 있고 퐁 셰이더로 5개의 메시를 그리면 반복적으로
    왔다갔다 하기 보단 한 셰이더를 사용하는 메시 10개 다 그린 후 퐁 셰이더로 그려준다.)

    2. 점광은 제한된 반경에서만 영향을 미치며, 이런 광원은 장면 여러 곳에 배치될 수 있다.
    퐁 셰이더를 수정해 장면상에서 최대 4개의 점광을 지원하도록 구현해본다.
    방향광에 대한 구조체처럼 점광에 대한 구조체를 만든다.
    이 구조체에는 광원의 위치, 난반사 색상, 정반사 색상, 정반사 지수, 그리고
    영향을 미치는 반경 범위가 필요하다.
    그 후 uniform으로 점광 배열을 생성한다.

    퐁 방정식은 정반사와 난반사에 대해 모든 광원을 고려해야 한다는 것을 제외하면 동일하다.
    또한 점광은 픽셀이 빛의 영향 반경 이내에 있을 경우에만 계산한다.
*/
/*
    조명(light)

    지금까지는 메시 fragmant shader는 픽셀에 대한 최종 색상으로서 텍스처 색상을 직접 사용했다.
    하지만 명암이 없다면 장면이 단조롭게 보인다.
    태양이나 전구 같은 콘셉트를 근사화 하거나 장면에 간단한 다양성을 부여하려면 조명이 필요하다.

    vertex 속성 재검토

    조명 메시는 vertex 위치와 UV 텍스처 좌표를 가진 vertex 속성보다
    더 복잡한 vertex 속성을 필요로 한다.
    조명 메시는 vertex 법선(Vertex normal)도 필요하다.

    법선은 표면에 수직인 벡터다.
    하지만 하나의점은 표면이 아니므로 버텍스 법선은 넌센스같다.
    이 점에 대한 법선을 만드려면 해당 vertex를 포함하는
    삼각형의 법선들 평균을구하면 vertex 법선의 계산이 가능하다.

    하지만 표면이 부드러운 모델에서는 잘 동작하지만 날카로운 모서리를
    가진 모델에서는 잘 동작하지 않는다.

    평균화된 vertex 법선으로 정육면체를 렌더링하면 정육면체의 구석 부분은 둥글게 나타난다.
    이것을 해결하기위해 아티스트는 정육면체의 구석에 여러 개의 vertex를 만들고,
    각 vertex가 다른 법선을 가지도록 제작해야 한다.

    fragment shader로 vertex를 보내면 모든 vertex 속성이 삼각형에 걸쳐 보간됐다는 것을
    떠올리면 이는 삼각형의 표면에 있는 모든 임의의 모든 픽셀이 삼각형에 있는
    3개의 vertex 법선들로 보간된 법선 값을 가진다는 것을 뜻한다.

    광원의 유형

    선택할 수 있는 광원은 많지만 몇 개의 광원 타입만이
    3D 게임상에서 지속적으로 사용된다.
    일부 광원은 전체 장면에 영향을 미치지만, 다른 광원은 광원 주면의 영역에만 영향을 미친다.

    1. 주변광(Ambient Light)
        주변광은 장면에서 모든 단일 오브젝트에 적용되는 균일한 양의 빛이다.
        게임의 레벨이나 하루의 시간에 따라 설정된 주변광의 양은 달라질 것이다.
        주변광은 균일한 양을 제공하므로 오브젝트의 여려 면을 다르게 비춰주지않는다.
        장면에 있는 모든 물체의 모든 부분에 균일하게 적용되는 전역적인 빛의 양이다.
        (ex: 주변광의 가장 간단한 표현 = 빛의 색상과 세기를 나타내는 RGB 색상값 (0.5, 0.5, 0.5)보다 (0.2, 0.2, 0.2)가 더 어둔다. )

    2. 방향광(directional ligth)  
        방향광은 특정 방향으로 발산하는 빛이다.
        주변광처럼 전체 장면에 영향을 미친다.
        하지만 방향광은 특정 방향에서 오므로 물체의 한쪽 측면을 밝혀주지만
        다른 측면은 어둡게 남겨둔다.(ex: 태양, 달 등)
        방향광은 RGB 색상값과(주변광처럼) 빛의 방향을 위한 정규화벡터가 필요하다.

    3. 점광(point light)
        점광은 특정 점에 존재하며 그 점에서 모든 방향으로 빛을 내뿜는다.
        특정 점에서 시작하므로 점광 또한 물체의 한 측면만 밝힌다.
        일반적으로 빛이 도달해서 영향을 미치는 반경을 가진다.
        (ex: 방의 전구, 촛불 등)
        점광은 RGB 색상, 광원의 위치, 광원으로부터 떨어진 거리가 증가할 때
        조명값이 얼마나 감소해야 되는지를 결정하는 감쇄(falloff) 반경을 가져야한다.

    4. 스포트라이트(spotlight)
        스포트라이트는 점광과 유사하지만 모든 방향으로 빛을 내뿜는 대신 원뿔 형태로 빛을 뿜는다.
        스포트라이트 시뮬레이션을 위해 점광의 모든 파라미터외에 추가적으로 원뿔의 각도가 필요하다.
        (ex: 조명, 손전등 등)

        

*/
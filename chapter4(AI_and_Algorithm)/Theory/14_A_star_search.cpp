/*
    A* 탐색 알고리즘(A*, A start), Astar function

    GBFS의 단점은 최적의 경로를 보장해주지 않는 것이다.
    하지만 GBFS를 수정한 A* 탐색은 최적을 경로를 보장해준다.

    A*는 시작 노드에서 임의의 노드로의 실제 비용을 뜻하는 경로 비용(path-cst)을 추가했다.
    표기법 g(x)는 노드 x의 경로 비용을 나타낸다.
    A*는 새로운 현재 노드를 선택할 때 노드의 경로 비용 g(x)와 휴리스틱 h(x)의
    총합인 f(x)가 가장 낮은 노드를 선택한다.

    f(x) = g(x) + h(x)

    A*가 최적의 경로를 찾기 위해서는 몇 가지 조건을 충족해야 한다.
    
    1. 시작점과 목표점 사이에는 당연히 경로가 존재해야 한다.
    2. 휴리스틱은 허용 가능해야 한다(즉 실제 비용을 초과해서는 안된다)
    3. 모든 edge의 가중치는 0과 같거나 커야된다.

    A* 탐색 알고리즘은 노드를 열린 집합에 추가할 때 경로 비용(path-cost)를 계산해야 한다.
    최소 비용 노드를 선택할 때 f(x)의 비용이 가장 낮은 노드를 선택한다.
    A*는 노드 채택(node adoption)이라는 프로세스를 사용해
    어느 노드가 부모가 되는지를 선택한다.

    GBFS에선 인접 노드는 항상 현재 노드를 부모 노드로 설정 했다.
    A*는 노드의 경로 비용 값 g(x)는 부모 노드의 g(x)값에 따라 달라진다.
    그래서 노드 x에 부모를 할당하기 전에 A*는 g(x) 값이 더 개선될 수 있을지를 확인해야 한다.
    이것을 노드 채택이라고 한다.

    A*의 최적화는 복잡한 주제다.

    최적화를 위한 사항 중 하나는 열린 집합에 동등한 위치의 노드가 많이 존재한다면
    어떤일이 일어날지에 관한 것이다.
    사각형 격자 그래프상에서 많이 발생하며, 맨해튼 휴리스틱을 사용하면 종종 발생하낟.
    노드 선택시 열린 집합에 비용이 동일한 노드가 너무 많다면 경로를 끝나게 하는 노드를 선택 못할 확률이 높아지게 된다.
    즉 그래프상에서 노드를 더 탐색하게 되므로 느려진다.

    동일한 비용 문제를 제거하는 한가지 방법은 휴리스틱 함수에 가중치를 추가하는 것이다.
    ex: 휴리스틱에 0.75같은 임의의 값을 곱하는 등
    그러면 휴리스틱 h(x) 함수에 비해 경로 비용 g(x) 함수에 더 많은 가중치를 두게 되며,
    경로 비용이 더 많이 반영된다는 것은 시작 노드에서
    좀 더 떨어져 있는 노드를 탐색하고 있을 확률이 높다는 것을의미한다.

    효율성을 볼때 격자 기반 길 찾기엔 A* 보단 다른 알고리즘ㅇ르 사용하는게 좋다.
    하지만 A*는 모든 그래프에서 동작한다.
*/
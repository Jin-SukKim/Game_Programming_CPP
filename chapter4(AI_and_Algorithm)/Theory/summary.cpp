/*
    게임 프로젝트는 간단한 타워 디펜스 게임이다.

    적은 왼쪽 시작타일에서 올느쪽 마지막 타일로 이동한다.
    플레이어는 격자상의 사각형에 탑을 세울 수 있어 상황에 따라 적의 경로는 변경된다.

    타일 선택은 마우스 클릭 후 B키를 사용한다.
    적은 A* 알고리즘을 사용해 이동한다.
    플레이어가 적을 완전히 차단할 수 없도록 하기 위해 적이 이동할 수 있는
    경로가 여전히 존재하는지 확인한다.

    Tile 클래스는 A* 탐색에 필요한 모든 정보를 포함한다.
    Grid 클래스는 타일을 생성하고 그래프를 초기화한다.
    
    요약

    인공 지능은 다양한 세부 분야가 존재하는 깊이있는 주제다.
    상태 기계를 사용하면 효율적인 방식으로 게임상에서 캐릭터를 AI로 제어하는것이 가능하다.
    switch 구문을 통해 간단한 상태 기께를 구현할 수 있지만
    상태 설계 패턴은 각 상태에 대한 별도의 클래스를 만들어 유연성을 증가시킨다.

    길 찾기 알고리즘은 게임상의 두 지점에 대한 최단 경로를 찾는다.
    길 찾기 구현을 위해 먼저 게임 세계에 대한 그래프 구현을 결정해야 한다.

    사각형 격자의 경우 그래프 구현은 간단하지만 여러 게임에서는 경로 노드나
    내비게이션 메시를 사용한다.

    가중치 없는 그래프에서 너비 우선 탐색(BFS)은 경로가 존재한다면
    최단 경로의 발견을 보장해준다.

    가중 그래프에서는 최단 경로를 찾기위해 A*나 Dijsktstra 알고리즘 등을 사용해야한다.

    체커나 체스 같은 2인 플레이어 턴 기반 게임에서 게임 트리는 현재 게임 상태에서
    이동 가능한 경우의 수를 표현한다.
    미니맥스 알고리즘은 현재 플레이어가 자신의 점수를 극대화하길 원한다고 가정하며,
    적은 현재 플레이어의 점수를 최소화하는 걸 목표로 삼고 있다고 가정한다.
    
    알파 베타 가지치기는 미니맥스를 최적화하지만 대부분의 게임에서 트리는 깊이 제한을 가져야 한다.

    연습

    1. Enemy나 Tower 클래스 또는 두 클래스 모두 AI 상태 기께를 사용하도록
       갱신한다.
       AI가 가져야하는 행위를 고려하고 상태 기꼐 그래프를 설게한 후
       AIComponent와 AIState 클래스를 사용해 구현한다.

    2. 포인어로(Four in a row) 게임에서 플레이어는 6행 7열의 수직 격자를 가진다.
       2명의 플레이어는 열의 상단에 조각을 차례대로 놓는다.
       그런 다음 조각을 열에서 가장 낮은 자유 위치로 끌어내린다.
       게임은 한 플레이어가 수평이나 수직, 또는 대각선으로 연속 4개의 조각을 얻을 떄까지 계속된다.

       게임 코드는 인간 플레이어가 마우스 클릭을 사용해서 게임 진행이 가능하도록 구현한다.
       그리고 AI가 깊이 제한을 가진 알파 베타 가지치기를 사용해 선택하도록 한다.
*/
/*
    불완전 게임 트리 다루기

    완전 게임 트리 생성하는 것은 항상 가능하지 않지만,
    미니 맥스 코드를 수정하면 불완전 게임 트리에 대응하는 것이 가능하다.

    함수는 노드가 아닌 함수 상태에 따라 동작해야 한다.
    다음으로 코드는 자식 노드를 반복하기 보다는 주어진 상태로부터
    가능한 다음 이동을 반복해야 한다.
    수정하는 이유는 미니맥스 알고리즘이 사전에 트리를 생성하기보다는
    실행 시간 동안에 트리를 생성한다는 것을 뜻한다.

    체스처럼 트리가 너무 크면 전체 트리 생성은 가능하지 않다.
    숙력된 체스 플레이어가 오직 8번의 다음 수를 예측할 수 있는 것처럼
    AI도 게임 트리의 깊이를 제한해야한다.
    즉, 코드는 노드가 게임 상태의 마지막에 있지 않다 하더라도 리프로써
    노드를 다룬다는 것을 뜻한다.

    정보에 입각한 결정을 내리기 위해 미니맥스는 종료되지 않은 상태가
    얼마나 좋은지를 알아야 한다.
    종료 상태와 다르게 정확한 점수를 알아내는 것은 불가능 하므로
    점수를 얻어내는 함수는 종료되지 않은 상태의 품질을 근사화하는
    휴리스틱 요소가 필요하다.
    즉 점수는 틱택토 게임에서처럼 {-1, 0, 1}같은 3개 중 하나가 아닌
    특정 범위 내의 값을 가진다는 것을 의미한다.

    휴리스틱 요소를 추가하면 미니맥스가 최선의 결정을 내리는 것을
    보장할 수 없다는 걸 의미해 주의한다.
    이 근삿값이 얼마나 정확한지는 알 수 없다.
    불완전 게임 트리의 미니맥스를 통한 선택된 이동은
    차선책에 불과하므로 완전 트리의 최선의 선택과 비교하면 손실이 발생할 수 밖에 없다.

    휴리스틱 함수는 게임에 따라 다양한다.
    ex) 체스 게임의 휴리스틱 함수 = 각 플레이어가 가진 말의 수, 각각의 말에 가중치 부여 가능
        하지만 휴리스틱의 결점은 때때로 짧은 기간에 장기말을 희생하는 것이 좋을때도 있다는 것이다.
        왕의 안전, 여왕의 기동력, 체스판 중앙의 통제 등을 고려,
        궁극적으로 몇가지 다른 요인들이 휴리스틱에 영향을 미친다.

    보다 복잡한 휴리스틱을 위해서는 많은 연산이 필요하다.
    하지만 대부분의 게이메서 AI의연산에 시간 제한이라는 제약을 설정한다.
    (ex: 체스의 10초 내로 다음 턴을 결정하는 룰 등)
    
    이런 시간 제한 설저은 AI의 지능을 낮출 수 있어
    탐색하려는 깊이 및 휴리스틱 복잡성 등과 균형을 맞춰야 한다.
*/
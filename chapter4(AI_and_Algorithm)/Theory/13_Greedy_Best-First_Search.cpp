/*
    탐욕 최우선 탐색(GBFS, Greedy Best-First Serach), GBFS function

    BFS는FIFO순으로 노드를 다루기 위해 큐를 사용했다면
    GBFS는 대신 어느 노드를 다음에 고려해야 하는지를 결정하기위해 h(x) 휴리스틱 함수를 사용한다.

    합리적으로 보이겠지만 최단 경로를 보장해주지 않는다.
    하지만 GBFS는 A* 알고리즘의 이해를도와준다.

    GBFS는 탐색을 진행하는 동안 하나의 큐를 사용하는 대신에 2개의 집합을 사용한다.
    어떤 집합인지의 여부는 이진값을 사용해 판단한다.

    1. 열린 집합(Open Set) : 평가를 위한 노드가 포함된다.
        - 휴리스틱 비용이 가장 적게 드는 노드를 제거한 뒤 이 노드를 테스트한다.
        - 보편적으로 우선순위 큐를 사용하지만 간결함을 위해 이 챕터는 벡터를 썻다.
        - 벡터를 사용하면 가장 낮은 비용을 찾기 위해 선형 검색을 한다.

    2. 닫힌 집합(Closed Set) : 노드가 평가를 위해 선택되면 닫힌 집합으로 이동한다.
        - 닫힌 집합의 노드는 더이상 조사하지 않는다.
        - 해당 노드가 닫힌 집합에 속하는지 알아내기 위해 사용된다.

    이 집합들의 노드가 경로상에 있다는 보장은 없지만 불필요한 노드를 쳐내는 데 도움이 된다.

    각각의 노드는 GBFS 탐색 동안 노드를 위한 추가 데이터가 필요하다.
    추가 데이터의 수가 많으므로 이 데이터를 캡슐화한 structure를 정의한다.

    가중 그래프를 사용하므로 부모 edge는 해당 노드로 들어오는 edge이다.
    각 노드는 자신의 휴리스틱 값과 자신이 어느 집합에 존재하는지 추적할 수 있어야한다.

    휴리스틱 계산을 위해선 각 노드에 세계에서의 노드의 위치 정보가 필요하다.


*/

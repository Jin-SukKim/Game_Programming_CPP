/*
    게임은 루프를 통해 초당 여러번 게임을 갱신한다.
    이 루프의 각 반복을 프레임이라 한다.

    프레임마다 완료하는 3개의 단계가 있다.
    
    1. 입력 처리
        - 키보드, 마우스, 네트워크 데이터, 리플레이 데이터 등
    2. 게임 세계 갱신
    3. 출력 생성
        - 그래픽, 오디오, 포스 피드백 컨트롤러 등

    대부분의 디스플레이는 래스터 그래픽스(Raster graphics)를 사용하며
    격자 형태의 픽셀을 사용한다.

    게임은 모든 픽셀에 대한 색상값을 저장하는 색상 버퍼(color buffer)를 가진다.

    게임과 디스플레이는 이 버퍼들을 번갈아가며 사용한다.
    더블 버퍼의 사용은 screen tearing(두 프레임 동시에 보여주는 화면)의 양을 줄인다.
    디스플레이가 준비된 상태에서만 버퍼 교환을 하는 수직 동기화, vsync를 활성화하면 제거가능하다.

    게임이 가변 프레임 레이트(30FPS -> 60FPS)에서도 정상 동작하려면 프레임 간의
    시간 간격을 의미하는 델타시간(delta time)함수로 모든 게임 로직을 작성해야한다.

    게임 루프의 게임 세계 갱신(update)에서는 델타 시간을 고려해야 한다.
    더욱이 프레임 레이트가 초과되지 않도록 프레임 제한을 추가한다.
    
    연습 

    1. 오른쪽 벽을 제거하고 두 번쨰 플레이어를 위한 패들로 교체해보기
        - 두 번째 패들은 첫 번째 패들의 모든 기능을 그대로
          옮겨와서 지원한다.

    2. 여러 공이 돌아다니는 멀티볼 지원하기.
        - 2개의 벡터를 포함하는 Ball 구조체를 만들어
          std::vector<Ball>을 선언해 활용한다.
*/
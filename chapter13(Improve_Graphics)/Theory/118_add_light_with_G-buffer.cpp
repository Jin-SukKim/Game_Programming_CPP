/*
    전역 조명

    이제 게임은 G 버퍼로 표면 특성을 쓰고 있으므로 이 특성을 사용해 완전하게
    조명 처리된 장면을 출력한다.
    이번엔 분산광이나 전역 방향광 같은 전역 조명에 중점을 둔다.

    기본 전제는 디폴트 프레임 버퍼로 화면 크기의 사각형을 그리는 것이다.
    이를 위해 각 픽셀에 해당하는 G 버퍼의 표면 특성을 샘플링한다.
    그 후 이 표면 특성ㅇ르 사용해 픽셀을 조명 처리하도록 퐁 조명 방정식을 계산한다.

    G버퍼로부터 얻은 전역 조명을 처리하는 vertex shader와 frag shader를 작성한다.
    vertex shader는 스프라이트 shader와 동일하고 frag shader는 퐁 셰이더와 비슷하나
    다른 점이 있따.
    
    frag shader에서 법선과 세계 위치를 G 버퍼로부터 얻을 수 있어 유일한 입력은 텍스처 좌표다.
    frag shader에 G 버퍼의 여러 텍스처(분산광, 법선, 세계 위치)를 위한
    sampler2D uniform을 추가하고 main에서 샘플링한다.

    그러면 방향광 uniform과 결합하면 퐁 반사 모델의 주변 요소, 분산 요소와 
    더불어 픽셀을 비추는 데 필요한 모든 정보를 갖추게 된다.

    반사요소는 계산할 수 없는데 각 표면의 반사지수가 현재 G 버퍼에는 없기때문이다.
    (나중에 반사 지수 데이터를 포함시켜주면 계산할 수 있다.) 

    퐁 주변 요소와 분산 요소를 계산한 후 픽셀의 최종 색상을 계산하기 위해
    G 버퍼로부터 얻은 표면의 분산광을 곱한다.

    전역 조명 vert shader와 frag shader를 작성한 후 이 셰이더를 Renderer 클래스에서 로드한다.
    mGGlobalSHader라는 Shader* 멤버 변수를 추가하고 LoadShader 함수에서 이 변수의 인스턴스를 생성한다.
    이 코드에서 먼저 vertex와 frag shader 파일을 로드하고 uniform 변수를 설정한다.

    그리고 G 버퍼의 각 텍스처를 해당 텍스처 인덱스에 바인딩하는 함수 SetTextureActive()를 추가한다.
    각 텍스처에서 호출하는 SetActive 함수는 인덱스를 인자로 받게 바꾸는데 이 인덱스는
    GLSL의 sampler2d uniform에 설정한 인덱스와 같다.

    마지막 단계는 전역 조명 셰이더를 사용해 G 버퍼로부터 사각형을 그리는 함수는 Renderer에 추가한다.
    DrawFromGBuffer란 함수를 생성한다.

    렌더러의 Draw의 첫 단계는 G 버퍼에 장면을 그리는 것이므로 이제
    DrawFromGBuffer가 기본 프레임 버퍼로 그리는 최초의 코드가 된다.
    사각형이 깊이 버퍼에 영향을 받지 않아야 하므로 사각형에 대한 깊이 테스트는 비활성화한다.

    그리고 G 버퍼 셰이더와 스프라이트 사각형 버텍스를 활성화하고 모든 G 버퍼 텍스철를
    활성화하기 위해 SetTexturesActive 함수를 호툴한다.

    그후 SetLightUniforms 함수로 G 버퍼 셰이더에 사용되는 모든 조명광 uniform을 설정한다.
    그리고 화면상의 모든 프래그먼트를 그린다.

    전역 조명 셰이더 코드를 사용해 조명처리를 했다.
    퐁 조명 방정식의 반사 요소를 계산하지 않았기에 장면은 이전보다 주변광 값을 더 높였지만 더 어둡게 보인다.
    어두움을 제외하면 순방향 렌더링 장면과 동일하게 보이고, 거울 텍스처는 여전히 순반향 렌더링을 사용하기에
    더 밝지만 잘 동작한다.

*/
/*
    프로젝트

    지연 셰이딩의 전체 구현을 한다.
    텍스처 품질을 향상시키기 위해 밉매핑과 이상성 얼라이어싱을 사용한다.
    프로젝트는 순방향 렌더링되는 거울 텍스처를 포함한다.

    요약

    텍스처 필터링이 작동하는 방식(최근접 이웃 필터링과 이중 선형 필터링)을 살펴봤다.
    밉매핑은 몇개의 저해상도 고품질 텍스처를 미리 생성하기에 
    텍스처의 크기가 축소될 때 샘플링 아티팩트를 축소할 수 있따.
    이 경우 이방성 필터링은 텍스처의 품질을 향상시킨다.

    또 다른 강력한 렌더링 기법은 장면을 텍스처에 렌더링하는 것이다.
    OpenGL은 텍스처와 연관된 임의의 프레임 버퍼 개체 생성을 가능하게 해준다.
    그러면 텍스처에 3D 장면을 그리도록 선택하는 것이 가능하다.

    이 방법의 사용법으로 거울과 같은 고품질 반사를 그리는 것이 있따.

    조명 처리에서 2-패스 접근법을 사용하는 지연 셰이딩에 대해 알아봤다.

    첫 번째 패스에서는 분산 색상, 법선 그리고 세계 위치와 같은 오브젝트의 표면 특성을 쓴다.

    두 번째 패스에서는 조명 방정식을 계산하기 위해 G 버퍼를 읽어들인다
    
    점광과 같이 제한된 범위를 가지는 광원에 대해서는 프래그먼트가 광원의 영향
    범위 내에 있는지를 확인하기 위해 광원 기하를 렌더링한다.
    
    지연 셰이딩은 부분적으로 투명한 오브젝트를 다룰 수 없는 문제 등이 있지만,
    장면에 수많은 광원이 있을 때는 매우 훌륭한 방법이다.

    연습

    1. 전역 G 버퍼 조명(방향광)과 점광에다 반사 요소에 대한 지원을 추가한다.
        이를 위해 먼저 G 버퍼에 표면의 반사 지수를 저장하는 새로운 텍스처가 필요하다.
        이 텍스처를 코드의 과련 부분(c++와 GLSL)에 추가한다.

    2. 지연 셰이딩에 새로운 타입의 광원을 추가할 때는 새로운 타입의 광원 기하가 필요하다.
        스포트라이트에 대한지원을 추가해본다.
        이를 위해 점광 처리가 끝난 후에 스포트라이트 광원을 그리는 셰이더와 SpotLightComponent를 생성한다.

        스포트라이트 메시는 SpotLight.gpmesh 파일(원뿔 모양)을 사용한다.
        스포트라이트는 점광과 같은 파라미터를 가지며, 또한 스포트라이트 각도에 대한 변수도 필요하다.
        각도 변경을 위해서는 메시를 비균등하게 스케일해야 한다.
        기본 메시는 반각이 30도가.



*/
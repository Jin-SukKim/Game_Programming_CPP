/*
    밉매핑(mipmapping)

    텍스처를 너무 확대하면 기술에 따라 이미지가 픽셀화되거나 흐리게 보인다.
    한편 텍스처의 크기를 줄이는 경우 텍스처에 저장돼 있는 모든 정보를 유지할 수 있는
    텍스처 샘플이 충분하지 않게 된다.
    (경계선을 볼 수 없게되는 등)

    ex) 4x4 텍스처를 2배로 줄이면 2x2 텍스처만 남아 이미지 손실이 일어난다.

    밉매핑에서는 단일 소스 텍스처보다는 밉맵(mipmap)이라는 일련의 추가 텍스처르 생성한다.
    이 텍스처는 소스 텍스처보다 낮은 해상도로 생성된다.
    ex) 소스 텍스처가 256x256 해상도라면 밉맵은 128x128, 64x64, 32x32 해상도로 생성된다.

    화면상 텍스처를 그릴 때 GPU는 텍셀 밀도가 1:1에 가장 가까운 밉맵 텍스처를 선택한다.
    밉매핑은 원본 해상도보다 높은 해상도로 텍스처를 확대할 때는 텍스쳐 품질 향상은 해주지 않지만
    텍스처의 크기를 줄이는 경우 텍스처 품질을 크게 향상시킨다.

    텍스처가 로드되는 정적인 시간에 밉맵 텍스처를 생성하기에 품질 향상이 가능하다.
    이는 고품질의 밉맵 텍스처를 생성하는 비싼 알고리즘을 사용하는 것이다.(박스필터 등)
    그래서 1:1에 근접한 텍셀 밀도의 고품질 밉맵 샘플링은 4:1 같은 높은 텍셀 밀도를
    가진 원본 텍스처에서 샘플링하는 것보다 좋게 보인다.

    밉맵 적용 방법은 2가지 접근법이 있다.

    1. 최근접 이웃 밉매핑
        - 1:1에 가장 가까운 텍셀 밀도를 제공하는 밉맵을 선택
        - 여러 경우에 잘 동작하지만 바닥 텍스처 같은 경우 밉맵 텍스처(또는 밉 레벨)가
          변경되는 경계 부분에서 줄무늬가 발생할 수 있따.

    2. 삼중 선형 필터링
        - 1:1 텍셀 밀도에 가까운 2개의 밉 레벨로 생플링하며(이중 선형 필터링 사용)
          최종 색상은 두 샘플링된 밉 레벨을 블렌딩한 결과다.
        - 밉 레벨 블렌딩뿐만 아닌 UV좌푤르 사용한 3차원상의 블렌딩이기에 이 프로세스를 삼중 선형이라 부른다.

    OpenGL의 텍스처 밉매핑 활성화 방법은 텍스처를 로딩한 후 함수 호출을 추가한다.
    이러면 자동적으로 고품질 필터링 알고리즘을 사용해 적절한 밉 레벨을 생성한다.

    glGenerateMipmap(GL_TEXTURE_2D);

    텍스처 파라미터 설정 시 축소 필터(텍스처가 화면상에서 작아질때)와 
    확대 필터(텍스처가 화면상에서 커질때)를 설정하는 것이 가능하다.

    1. 축소 필터 : GL_TEXTURE_MIN_FILTER
    2. 확대 필터 : GL_TEXTURE_MAG_FILTER

    // 밉맵 생성 후 밉맵 사용을 위해 축소 필터 텍스처 파라미터를 변경
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEARMIPMAP_LINEAR);
    // 텍스처 확대를 위해 삼중 선형 필터링 활성화
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    텍셀 밀도가 1:1보다 낮은 경우(텍스처를 늘려야 하는 경우)는 밉맵이 도움이 되지 않기에
    확대에 대한 필터링 기능은 여전히 GL_LINEAR을 사용한다.
    축소에 대한 최근접 이웃 밉매핑을 사용하려면 GL_TEXTURE_FILTER의 마지막 파라미터로
    GL_LINEAR_MIPMAP_NEAREST를 전달하면 된다.

    밉매핑의 다른 장점은 텍스쳐 캐싱이 동작하는 방식으로 인해 렌더링 성능을 향상시켜준다.
    CPU 캐시처럼 GPU는 메모리를 위한 캐시를 가진다.
    작은 밉 레벨은 매우 캐시 친화적이라 전반적인 렌더링 성능을 향상시킨다.

*/
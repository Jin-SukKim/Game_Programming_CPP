/*
    게임 코드에 충돌 추가하기

    BoxComponent 클래스로 액터 충돌 구현을 하고
    PhysWorld 클래스는 액터간 충돌을 감지하기 위해 BoxComponent 인스턴스를 관리한다.

    BoxComponent 클래스

    Update 함수 재정의 대신 OnUpdateWorldTransform 함수를 재정의한다.
    소유자 액터는 세계 변환을 재계산할 때마다 BoxComponent의 OnUpdateWorldTransform 함수를 호출한다.

    BoxComponent 클래스의 데이터 멤버에는 2개의AABB 구조체 인스턴스가 있다
    1. 오브젝트 공간 경계를 위한 AABB
    2. 세계 공간 상의 경계 AABB

    세계 공간 경계는 소유자 액터의 세계 변환이 변경될 때마다 바뀐다.
    마지막 BoxComponenet 클래스는 BoxComponent를 세계 회전을 기반으로 회전시킬지는
    정하는 이진값을 가진다.
    액터 회전시 이 인집값에 따라 회전 유무를 선택한다.

    메시 파일의 오브젝트 공간 경계(바운딩)을 얻기 위해 Mesh 클래스에도 멤버 데이터로 AABB를 추가한다.
    gpmesh 파일을 로드할 때 Mesh는 각 vertex마다 AABB::UpdateMinMax를 호출해 최적화된
    오브젝트 공간 AABB를 산출한다.
    그러면 메시를 사용하는 액터는 메시의 오브젝트 공간 바운딩 박스를 얻어 액터의 BoxComponent로 전달한다.

    오브젝트 바운딩 박스를 세계 바운딩 박스로 변환하기 위해선 바운딩 박스에 스케일, 회전, 이동을 적용하면 된다.
    세계 변환 행렬 구축과같이 회전은 원점이 중심임으로 순서가 중요하다.
    박스의 크기는 소유자 액터의 스케일값을 min, max에 곱해서 조절한다
    박스 회전시 AABB::Rotate에 소유자 액터의 쿼터니언을 전달한다.
    mShouldRotate 값이 ture인 경우 이 회전을 사용한다.
    박스의 이동은 소유자 액터의 위치를 min과 max에 더하면 된다.


    PhysWorld 클래스

    물리 세계를 위한 별도의 클래스이다.
    Game에 Physworld 포인터를 추가하고, Initialize 함수에서 PhysWorld를 초기화한다.

    이 클래스는 BoxComponenet의 포인터 벡터와 public 함수 AddBox, RemoveBox를 가진다.
    그리고 BoxComponent의 생성자와소멸자는 PhysWorld의 addBox와 RemoveBox 함수를 호출한다.
    이를 통해 PhysWorld 클래스는렌더러가 모든 스프라이트 컴포넌트의 벡터를 가졌던 것처럼
    모든 박스 컴포넌트의 벡터를 가진다.

    PhysWorld는 게임 세계 상의 모든 박스 컴포넌트를 추적한다.
    이런 박스들의 충돌 테스트 기능 지원을 추가한다.
    
    선분과 박스의 교차 테스트를 지원하는데 선분은 잠재적으로 여러 박스와 교차하므로
    SegmentCast 함수는 가장 가까운 교차가 가장 중요한 교차라고 가정한다.
    박스 컴포넌트의 벡터는 정렬됮 ㅣ않았으므로 SegmentCast는 최초로발생한 교차를
    단순히 return해선 안되고 모든 박스를 테스트하고 난 뒤 가장 작은 t값을 교차결과로반환한다.
    가장 작은 t값은 교차점이 선분의 시작점과 가장 가깝다는 것을 의미한다.

    SegmentCast를 활용한 공의 충돌

    이번 프로젝트는 플레이어가 쏘는 공 발사체와 물체가 충돌하는지를 판별하기 위해 SegmentCast를 사용한다.
    공이 오브젝트 표면과 충돌시 표면의 법선 방향으로 튕긴다.
    먼저 액터가 특정 방향을 향하기 위해 회전값 수정 함수가 필요하다.
    Actor에 내적, 외적, 쿼터니언을 사용해 회전값을 변경하는 헬퍼함수를 추가한다.(RotateToNewForward 함수)

    BallActor 클래스를 구현해 공 이동을 구현한다.
    MoveComponent의 서브 클래스 BallMove를 BallActor에 붙여주는데 BallMove::Update 함수는
    처음에 볼이 이동하는 방향으로 선분을 생성한다.
    이 선분이 게임 세계상에서의 뭔가와 교차하면 표면에서 튕길 것이다.
    Vector3d::Reflect를 사용해 이동 방향을 반사시킨다음 새로운 방향을 향하도록 RotateNewForward를 사용한다.

    PhysWorld에서 박스 충돌 테스트

    현 프로젝트엔 사용ㅎ하지 않았지만, 일부 게임에선 물리 세계의 모든 박스 간 충돌 테스트가
    필요할 수 있따.
    이 테스트를 위한 우직한 구현은 세계상의 모든 상자 쌍 조합에 충돌 테스트를 수행하는 것이다.
    이 기초적인 접근법은 O(n^2) 알고리즘을 사용한다.
    모든 상자를 대상으로 테스트를 수행한다.
    TestPairwise 함수는 유저가 정의한 함수 f를 파라미터로 받아 박스가 서로 교차하면 f를 호출한다.

    TestPairwise 함수는 개념적으로는 간단하지만, 불필요한 Intersect 함수호출이 너무 ㅁ낳다.
    이 함수는 세계상에서 서로 반대편에 있는 두 박스도 바로 옆에 있는 사자인 것처럼 처리한다.
    이번 프로젝트는 144개의 박스가 존재하는데 총 1만 번 이상의 Intersect 함수 호출을 실행해야 된다.

    축 정렬 박스 2개가 두 좌표축에서 겹치지 않는다면 교차하지 않는다는 사실을 활용하면 최적화가 가능한다.
    두 박스가 교차한다면 한 박스의 구간 [min.x, max.x]는 또 다른 박스의 구간 [min.x, max.x]와 겹쳐야 한다.

    SAP(Sweep and Prune) 알고리즘은 박스 교차 테스트의 수를 줄이기 위해
    두 좌표축이 겹치는지의 유무를 관찰한다.
    SAP 알고리즘은 축ㅇ르 선택하고 축을 따라 겹치는 부분이 있는 상자만을 테스트한다.

    x축에 대한 SAP 알고리즘이 동작하는 방법은 먼저 박스의 최소 x값으로 박스를 정렬한다.
    그 후 외부 루프에서 박스의 최대 x값을 얻어 max에 저장한다.
    내부 루프에서 min.x가 max보다 작은지만 살핀다.
    내부 루프에서 max보다더 큰 min.x을 가진 최초의 박스와 만나면 외부 루프의 상자는
    x축 간격이 겹치는 박스가 더 이상 없다는 것을 뜻한다.
    즉 외부 루프 상자는 이제 교차 가능한 박스가 없으므로 내부 루프를 나오며,
    외부 루프의 다음 상자에서실행을 반복한다.

    벽과 플레이어와의 충돌

    각각의 벽에 BoxComponent를 추가해 플레이어가 벽을 뚫지 못하게 한다.
    기본 아이디어는 프레임마다 모든 PlaneActor와 플레이어와의 충돌을 계산하는 것이다.

    플랫폼 AABB와 플레이어 AAVV 충돌을 묘사하기 위해 일단 축마다 차이를 계산한다.
    1. 플레이어 max.x와 플랫폼 min.x의 차
    2. 플레이어 min.x와 플랫폼 max.x의 차

    이 차이값 중 가장 작은 절대값이 두 AABB에서의 최소 겹침이다.
    플레이어의 위치값에 최소 겹칩인 두 AABB의 차를 더하면 플레이어는 정확히 플랫폼의 바로위에 서게 된다.
    플레이어의 위치가 변경되면 플레이어의BoxCompoenent 또한변경되므로 교차 시에
    BoxComponent의 경곘값을 재계산해야 한다.
*/
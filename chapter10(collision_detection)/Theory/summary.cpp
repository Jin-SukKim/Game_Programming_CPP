/*
    프로젝트

    BoxComponent와 PhysWorld로 여러 유형의 교차를 구현했다.
    공 발사체의 충돌을 감지하기 위해 SegmentCast를 사용해
    별과 충돌하는 플레이어의위치를 보정하는 로직ㅇ르 구현했다.

    요약

    게임에서 충돌을 감지하는 기술에 대해 공부했다.
    충돌 감지를 위해 여러 유형의 기하 타입을 사용한다.
    
    선분은 시작과 끝점이 있다.
    평면은 평면의 법선 벡터와 원점까지의 거리로 표현된다.
    구체는 심플한 바운딩 볼륨이지만 형태가 다양한 여러 캐릭터에 대해서는
    긍정 오류(false positive)를 야기할 수 있다.
    축 정렬 바운딩 박스(AABB)는 평면이 기본 축의 방향과 동일해야 되는 반면
    방향성이 있는 바운딩 박스(OBB)는 이러한 제한이 없다.

    여러 유형의 교차 테스드도 있다.
    점 포함 테스트에서는 물체가 점을 포함하는지를 판정할 수 있따.
    두 바운딩 볼륨이 서로 교차하는 상황을 확인했다.

    선분이 평면, 구체 그리고 여러 유형의 박스와 교차하는지를 테스트했다.
    이동 오브젝트에는 게임에 프레임 사이에서 발생한 충돌을 놓치지 않도록
    연속 충돌 감지 방법을 사용했따.

    게임에서 충돌 감지 코드를 사용할 때 일일히 전부 테스트하는 것보단
    SAP 범용 알고리즘을 사용하는 것이 보다 효율적이다.
    
    SAP 알고리즘은 두 박스에서 축을 따른 각각의 박스 간격이 서로 겹치지 않으면 
    교차할 수 없다는 사실을 이용한다.

    연습

    1. 플레이어 캐릭터에 점프를 추가한다.
    지면 오브젝트는 이미 AABB를 가지고 있고 점프는 스페이스바를 이용해 구현한다.
    플레이어가 점프 키를 누르면 +z 방향으로 추가 속도를 설정한다.
    감속시키기 위해선 음의 z 중력 가속도를 추가한다.
    점프의 정점에 도달하면 이후에 플레이어 캐릭터는 떨어지는데 
    하강 시 FixCollisions를 사용해 플레이어가 PlaneActor 위쪽에 있는지 확인한다.
    지면에 안착하면 중력을 비활성화시키고 z속도를 0으로 설정한다.

    코드 모듈화를 위해 캐릭터의 여러 상태를 표현하는 간단한 상태 기계를 사용하는 것도 좋다.

    1. 지면
    2. 점프
    3. 하강

    추가 기능으로지면 상태에서 하강 상태로 전이한느 것을 실험한다.
    플레이어가 플랫폼상을 걷고 있는지를 확인하기 위해 지면 상태에 있는동안
    SegmentCast를 아래 방향으로 계속 유지한다.
    SegmentCast가 실패하면 캐릭터 상태를 지면에서 하강상태로 전환한다.

    2. SweepAndPrune 함수를 세 좌표 축모두에 적용해 불필요한 부분을 제거하도록 변경한다.
    PhysWorld는 박스를 담는 3개의 벡터를 선언한다.
    각각의 벡터는 좌표 축 하나와 관련된다.
    AddBox/RemoveBox가 세 벡터에 접근하도록 변경하고 축별로 각각의 벡터를 정렬한다.

    SAP 알고리즘 코드는 각 축마다 독립적으로 테스트해야 하며,
    축을 따라 겹치는 박스 쌍의 벡터를 생성해야 한다.
    세 축의 작업이 완료되면 코드는 겹쳐진 박스 쌍 벡터를 비교한다.
    세 축 모두에서 겹치는 상자들은 서로 교차하는 상자들이다.

    3. OBB와 OBB의 교차를 판단하는 새로운 Intersect 함수를 구현한다.
    AABB처럼 분리된 축 접근을 사용한다.
    (즉, 교차할 수 없는지, 논리적으로 글너 결과가 나올 수 없는지)
    그러나 AABB 테스트는 3개의 축이지만 OBB는 15개 축을 테스트해야 한다.

    새로운 함수 구현을 위해 각 OBB의 8개 구석값을 계산한다.
    각 OBB는 각 박스에 해당하는 3개의 로컬 축을 가진다.
    이 로컬 축은 올바른 점 집합으로 뺴기를 해 만든 벡터를 정규화하면 구할 수 있따.
    각각의 박스는 3개의 로컬출을 가지므로 총 6개의 잠재적인 분리된 축을 만든다.
    다른 9개 벡터는 두 OBB 로컬 축 사이의 외적의 조합이다.

    축을 따른 박스의 간격을 계산하려면 각 박스의 구석과 축의 내적을 계산한다.
    가장 작으 내적값은 간격의 최솟값이다.
    내적의 가장 큰 값은 간격의 최대값이다.
    그 후 박스의 [min, max] 간격이 축을 따라 분리됐는지를 경정한다.
    15개의 축에서 1개라도 분리되면 박스는 교차할 수 없다.


*/
/*
    동적 오브젝트

    지금까지의 교차 테스트는 동시에 일어나느 사건의 테스트였다.
    이는 게임에서 두 물체가 현재 프렝미에서 교차하는지 여부를 테스트한다는 걸 의미한다.
    간단한 게임은 충분하지만 현식적으로 문제점이 많다

    캐릭터가 종이로 탄환을 발사하는 경우를 가정한다.
    탄환은 바운딩 구체를 사용하고 종이는 바운딩 박스를 사용한다.
    각 프레임에서는 두 오브젝트가 교차하는지를 테스트한다.
    하지만 탄환은 빠르게 이동하므로 정확히 교차하는 특정한 하나의 프레임이
    존재할 가능성은 거의 없다.
    즉 교차의 즉석 테스트는 교차 순간을 놓칠수 있따.

    탄환의 경우 선분으로 다룸으로써 교차문제를 해결하는 것이 가능하다.
    선분의 시작점이 이전 프레임의 탄환 위치이고, 끝점은 현재 프레임의 탄환 위치다.
    이렇게 하면 이전 프레임과 현재 프레임 사이의 특점 지점에서 탄황과 종이의 교차 감지가 가능하다.
    그러나 매우 작은 오브젝트만 가능하고 커다란 물체는 선분으로 표현할 수 없다.

    이동 중인 구체 2개의충돌 같은 이부 유형은 교차 시간에 정확한 충돌을 알아 내는것이 가능하다.
    하지만 2프렝미에 걸쳐 회전하는 박스의 경우 충돌이 정확한지 파악은 어렵다.

    여러 유형의 이동 오브젝트에 대해 프레임 사이의 여러 지점에서 충돌 여부를
    판별하는 과정을 연속 충돌 감지(CCD, Continuous Collision Detection)라 한다.

    교차 시점에 바로 충돌을 알아내는 방법을 알기 위해이동 중인 두 구체 사이의 교차를 살펴본다.
    구의 궤적 교차(swept-sphere intersection)이라부리는 이 교차는 면접 질문에도 종종 나온다.

    각각의 구체에 대해 이전 프레임과 현재 프레임의 중심정을 알고 있다.
    구의 중심점을 선분 매개 방정식으로 표현한다.
    선분 매개 방정식에서 이전 프레임의 중심점은 t = 0일 때이며,
    현재 프레임의 중심점은 t = 1일 때다.

    구체 P에서 P0은 이전 프레임 위치고 P1은 현재 프레임의 위치다.
    똑같이 구체 Q는 Q0, Q1을 가진다.
    그래서 두 구체 P와 Q는 위치에 대한매채 방정식을 다음처럼 기술할 수 있다.

    P(t) = P0 + (P1 - P0)t
    Q(t) = Q0 + (Q1 - Q0)t

    그리고 두 구체 사이의 거리가 두 구체 반지름의 합과 같은 때의 t값이 필요하다.
    
    ||P(t) - Q(t)|| = rp - rq

    그리고 선분과 구 교차 테스트했던 방식과 유사하다.
    얄쪽변을 제곱하고 길이의 젝보을 내적으로 바꾼다.

    (P(t) - Q(t)) * (P(t) - Q(t)), 내적 = (rp + rq)^2
    (P0 + (P1 - P0)t - Q0 + (Q1 - Q0)t) * (P0 + (P1 - P0)t - Q0 + (Q1 - Q0)t) = (rp + rq)^2

    식을 정리하고 변수를 치환한다.

    X = P0 - Q0
    Y = (P1 - P0) - (Q1 - Q0)
    (X + Yt) * (X + Yt) = (rp + rq)^2

    마지막으로 내적을 덧셈 분배 법칙으로 풀고 이차식 형태로 정리한다.

    (X + Yt) * (X + Yt) = (rp + rq)^2
    a = Y * Y
    b = 2X * Y
    c = X * X - (rp + rq)^2
    at^2 + bt + c = 0
    t (-b +- sqrt(b^2 - 4ac)) / 2a

    선분과 구체의 교차와 같이 실수해 존재 유무를 결정하기 위해 판별식을 사용한다.
    오직 2개의 t값 중 작은 값인 최초의 교차점에만 관심이 있다.
    그리고선분과 구체의 교차 테스트처럼 t가 범쉬 [0, 1]안의 값인지 검증해야 한다.
    
    SweptSphere 함수는 구의 궤적 교차에 대한 코드를 보여준다.
    함수는 참족밧으로 t를 반환하며 호출자는 이 t값을 사용해 교차 시점의 구체 위치를 결정한다.


*/
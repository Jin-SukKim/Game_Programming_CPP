/*
    레벨 파일 로딩

    지금까지는 게임 세계의 오브젝트의 배치에 있어 데이터 중심의 접근 방식을 사용하지 않았다.
    대신 Game::LoadData 함수가 주변광 같은 전역 속성과 게임상의 액터나 컴포넌트를 기술했다.
    이 방법은 단점이 몇가지 있는데 가장 큰 닩머은 레벨에 정육면체 하나를 배치하는 것 같은
    아주 사소한 변경에도 소스 코드 전체 재컴파일이 필요하다는 것이다.
    게임에서 오브젝트 배치를 바꾸려는 디자이너는 C++ 소스 코드를 변경하지 않아야 한다.

    해결책은 해당 레벨을 위한 별도의 데이터 파일을 만드는 것이다.
    이 데이터 파일은 레벨에 포함된 액터와 해당 액터의 속성을 지정할 수 있어야 하며,
    추가로 액터의 컴포넌트를 조정할 수 있어야 한다.
    또한 레벨 파일은 레벨에 필요한 전역 속성도 포함해야 한다.

    2D 게임의 경우 데이터 파일은 잘 동작한다.
    게임 세계의 여러 오브젝트에 대해 서로 다른 ASCII 문자를 정의하고 이런 오브젝트의
    텍스트 격자를 만들기만 하면 된다.

    3D 게임에선 잘 동작하지 않는다.
    게임상의 각각의 오브젝트는 임의의 3D 좌표를 가지고 있기 때문이다.
    게다가 여태 프로젝트의 게임 오브젝트 모델은 액터가 컴포넌트를 가지고 있어서
    각 컴포넌트 속성도 저장해야 한다.

    그래서 보다 구조화된 파일 포맷이 필요하다.
    JSON 포맷을 사용해 데이터를 다룬다.
    하지만 바이너리 파일 포맷 제작에 필요한 테크닉과 텍스트 포맷을 사용할 때의 트레이드 오프도 살펴본다.

*/
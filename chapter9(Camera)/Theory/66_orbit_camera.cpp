/*
    궤도 카메라(orbit camera)

    이 카메라는 대상 물체에 초점을 맞추고 그 물체 주위를 공전한다.
    이런 카메라는 주로 빌더 게임(플래닛 코스터 등)에서 사용한다.
    궤도 카메라는 플레이어가 물체 주변 지역을 쉽게 볼 수 있게 해준다.

    궤도 카메라의 가장 간단한 구현은 절대 세계 공간 위치보다는 대상과의
    오프셋으로서 카메라 위치를 저장하는 것이다.
    이렇게 하면 카메라의 회전은 항상 원점을 중심으로 회전한다는 이점을 취할 수 있따.
    카메라 위치가 대상 오브젝트로부터의 오프셋이라면 대상 오브젝트에
    대한 회전을 효육적으로 구현하는 것이 가능하다.

    (OrbitCamera, OrbitActor 클래스)
    일반적으로 컨트롤러는 물체에 요와 피치를 적용하기 위해 마우스를 사용한다.
    상대적인 마우스 이동을 회전값으로 변경하는 입력 코드는 1인칭 카메라와 비슷하다.
    그러나 플레이어가 오른쪽 마우스 버튼을 누를 때만 카메라가 회전하도록 제한을 추가한다.
    (일반적인 컨트롤 방식)
    SDL_GetRelativeMouseState 함수가 버튼의 상태를 반환한다.
    다음 조건으로 플레이어가 마우스 버튼을 누르고 있는지 여부를 테스트한다.
    if(buttons & SDL_BUTTON(SDL_BUTTON_RIGHT))

    OrbitCamera 클래스에 필요한 변수

    1. Vector3d mOffset // 대상과의 오프셋
    2. Vector3d mUp     // 카메라 상향 벡터
    3. float mPitchSpeed    // 피치의 초당 회전 속도
    4. float mYawSpeed      // 요의 초당 회전 속도

    피치 속도와 요 속도는 각 유형의 회전에 대한 카메라의 초당 현재 회전수를 기록한다.
    소유자 액터는 마우스 이동을 토대로 이런 속도를 갱신할 수 있다.
    OrbitCamera는 카메라의 상향 벡터뿐만 아닌 오프셋이 필요하다.

    상향 벡터는 궤도 카메라가 요와 피치 모두에서 완전한 360도 회전을 허용하므로 필요하다.
    즉, 카메라는 거꾸로 뒤집을 수 있으므로 (0, 0, 1)을 보편적인 상향 벡터로 상용할 수 없으며,
    카메라가 회전함에 따라 상향 벡터를 갱신해야 한다.

    OrbitCamera의 생성자에서는 피치와 요 속도 둘 다 0으로 초기화한다.
    mOffset은 아무 값으로 초기화할 수 있지만, 여기서는 물체의 뒤쪽 400단위에 있는
    (-400, 0, 0)좌표로 카메라를 초기화한다.

    Update함수에선 먼저 해당 프레임에 적용되는 요의 양을 나타내는 쿼터니언을 선언한다.
    이 쿼터니언은 세계의 상향 벡터에 대한 쿼터니언이다.
    이 쿼터니언을 사용해 카메라의 오프셋과 상향 벡터를 변환한다.

    다음으로 새 오프셋으로부터 카메라 전방 벡터를 계산한다.
    카메라 전방 벡터와 카메라 상향 벡터와의 외적을 통해 카메라 오른쪽 벡터를 구한다.
    그 후 카메라 오른쪽 벡터를 사용해 피치 쿼터니언을 계산하고 이 쿼터니언을 사용해
    카메라 오프셋과 상향 벡터를 회전시킨다.

*/
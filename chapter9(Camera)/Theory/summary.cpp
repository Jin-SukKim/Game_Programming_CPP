/*
    프로젝트

    언프로젝션 코드와 공부한 4개의 카메라를 보여준다.

    1인칭 모드로 시작해 1~4번키를 이용해 다른 카메라로 전환한다.

    요약

    여러 다양한 타입의 카메라를 구현하는 방법을 공부했다.
    
    1인칭 카메라는 세계를 이동하는 캐릭터의 시각에서 세계를 나타낸다.
    전형적인 1인칭 제어 방식에선 이동을위해 wasd를 사용하고 마우스로 회전을한다.
    마우스 시점을 움직이면 캐릭터도 같이 움직인다.
    또한 1인칭 뷰 피치를 사용해 1인칭모델의 방향을 지정했다.

    기본 팔로우 카메라는 물체 뒤에 경직된 느낌으로 따라간다.
    이런 카메라는 회전시 캐릭터가 회전하는지 세계가 회전하는지 구분하기 어려워 회전이 세련되지 못하다.
    개선을 위해 이상적인 카메라와 실제 카메라 사이에 스플링을 추가해 부드러움을 추가해준다.

    궤도 카메라는 보통 마우스나 조이스틱 컨트롤을 사용해 물체 주위를 회전한다.
    구현을 위해 위치는 대상 오브젝트로부터 오프셋으로 표현한다.
    그리고 쿼터니언과 일부 벡터 수학으로 요와 피치 회전을 적용해 최종 뷰를 얻는다.

    스플라인 곡선상의 점들로 정의된 곡선이다.
    스플라인은 카메라 컷신에 널리 사용된다.
    캣멀롬 스플라인은곡선의 n점을 나타내기 위해 최소 n+2개의 점이 필요하다.
    캣멀롬 스플라인 방정식을 적용하면 이 경로를 진행하는 카메라 구현이 가능하다.

    언프로젝션은 마우스로 오브젝트를 선택하거나 피킹하는 등의 여러 용도로 사용횐다.
    언프로젝션 계산을 위해 먼저 화면 공간 좌표를 정규화된 장치 좌표로 변환한다.
    그 후 이 장치 좌표에 언프로젝션 행렬에 해당하는 뷰-투영 행렬의 역행렬을 곱한다.

    연습

    1. 많은 팔로우 카메라는 유저가 제어할 수 있는 카메라 회전을 지원한다.
    유저가 카메라를 회전할 수 있도록 코드를 추가한다.
    오른쪽 마우스 버튼을 눌렀을 때 카메라에 피치와 요를 적용한다.
    버튼을 놓는다면 피치/요 회전을 0으로 되돌린다.

    회전에 대한 코드는 궤도 카메라의 회전 코드와같다.
    또한 궤도 카메라처럼 z축이 상향 벡터라고 추정하지 않는다.

    2. 현재 스플라인 카메라는 경로상의 한 방향으로만 이동하고 끝에 도달하면 멈춘다.
    경로 끝에 도달하면 뒤로 이동하도록 수정한다.
*/